"use strict";(self.webpackChunkk_8_s_god=self.webpackChunkk_8_s_god||[]).push([[5329],{28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var a=t(96540);const s={},r=a.createContext(s);function i(n){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(r.Provider,{value:e},n.children)}},76790:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"pgsql/replication/postgresql startup\u5904\u7406 - postgresql\u5185\u6838\u5206\u6790 - SegmentFault \u601d\u5426","title":"postgresql startup\u5904\u7406 - postgresql\u5185\u6838\u5206\u6790 - SegmentFault \u601d\u5426","description":"\u5185\u5bb9\u7b80\u4ecb","source":"@site/docs/pgsql/replication/postgresql startup\u5904\u7406 - postgresql\u5185\u6838\u5206\u6790 - SegmentFault \u601d\u5426.md","sourceDirName":"pgsql/replication","slug":"/pgsql/replication/postgresql startup\u5904\u7406 - postgresql\u5185\u6838\u5206\u6790 - SegmentFault \u601d\u5426","permalink":"/blog/docs/pgsql/replication/postgresql startup\u5904\u7406 - postgresql\u5185\u6838\u5206\u6790 - SegmentFault \u601d\u5426","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pgsql/replication/postgresql startup\u5904\u7406 - postgresql\u5185\u6838\u5206\u6790 - SegmentFault \u601d\u5426.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pg_walsender","permalink":"/blog/docs/pgsql/replication/pg_walsender"},"next":{"title":"postgresql\u6d41\u590d\u5236\u540c\u5f02\u6b65\u5206\u6790","permalink":"/blog/docs/pgsql/replication/postgresql\u6d41\u590d\u5236\u540c\u5f02\u6b65\u5206\u6790"}}');var s=t(74848),r=t(28453);const i={},o=void 0,p={},l=[{value:"\u5185\u5bb9\u7b80\u4ecb",id:"\u5185\u5bb9\u7b80\u4ecb",level:4},{value:"pg\u7248\u672c",id:"pg\u7248\u672c",level:5},{value:"startup\u6d41\u7a0b",id:"startup\u6d41\u7a0b",level:5},{value:"startup\u6d88\u606f\u7c7b\u578b",id:"startup\u6d88\u606f\u7c7b\u578b",level:5},{value:"\u51fd\u6570\u8c03\u7528\u5173\u7cfb\u56fe",id:"\u51fd\u6570\u8c03\u7528\u5173\u7cfb\u56fe",level:4},{value:"startup\u7b80\u8981\u5206\u6790",id:"startup\u7b80\u8981\u5206\u6790",level:4},{value:"startup package\u7ed3\u6784",id:"startup-package\u7ed3\u6784",level:5},{value:"\u672c\u6587\u7ebf\u7d22",id:"\u672c\u6587\u7ebf\u7d22",level:5},{value:"BackendStartup\u5206\u6790",id:"backendstartup\u5206\u6790",level:5},{value:"BackendInitialize\u5206\u6790",id:"backendinitialize\u5206\u6790",level:5},{value:"ProcessStartupPacket\u5206\u6790",id:"processstartuppacket\u5206\u6790",level:5},{value:"BackendRun\u5206\u6790",id:"backendrun\u5206\u6790",level:5},{value:"PostgresMain\u5206\u6790",id:"postgresmain\u5206\u6790",level:5},{value:"InitPostgres\u4ecb\u7ecd",id:"initpostgres\u4ecb\u7ecd",level:5},{value:"PerformAuthentication\u5206\u6790",id:"performauthentication\u5206\u6790",level:5},{value:"ClientAuthentication\u5206\u6790",id:"clientauthentication\u5206\u6790",level:5},{value:"\u6293\u5305\u5206\u6790",id:"\u6293\u5305\u5206\u6790",level:5},{value:"\u6d4b\u8bd5\u6b65\u9aa4",id:"\u6d4b\u8bd5\u6b65\u9aa4",level:6},{value:"\u7ed3\u8bed",id:"\u7ed3\u8bed",level:5},{value:"Q&amp;A",id:"qa",level:5},{value:"\u9057\u7559\u95ee\u9898",id:"\u9057\u7559\u95ee\u9898",level:5}];function c(n){const e={a:"a",br:"br",code:"code",h4:"h4",h5:"h5",h6:"h6",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h4,{id:"\u5185\u5bb9\u7b80\u4ecb",children:"\u5185\u5bb9\u7b80\u4ecb"}),"\n",(0,s.jsx)(e.p,{children:"\u672c\u6587\u4e3b\u8981\u4ecb\u7ecdpostgresql \u7684startup\u5904\u7406\u6d41\u7a0b\u3002startup\u53d1\u751f\u5728\u4e00\u4e2aclient\u8fde\u63a5server\u7aef\u65f6\uff0cserver\u4e0eclient\u5efa\u7acb\u8fde\u63a5\uff0c\u5e76\u521b\u5efa\u5bf9\u5e94\u7684backend process\u3002\u540e\u7eed\u5c31\u53ef\u4ee5\u8fdb\u884c\u6b63\u5e38\u7684\u6d88\u606f\u4ea4\u4e92\u4e86\u3002"}),"\n",(0,s.jsx)(e.p,{children:"PostgreSQL \u901a\u4fe1\u534f\u8bae\u5305\u62ec\u4e24\u4e2a\u9636\u6bb5\uff1a startup \u9636\u6bb5\u548c\u5e38\u89c4 normal \u9636\u6bb5\u3002"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"startup \u9636\u6bb5\uff0c\u5ba2\u6237\u7aef\u5c1d\u8bd5\u521b\u5efa\u8fde\u63a5\u5e76\u53d1\u9001\u6388\u6743\u4fe1\u606f\uff0c\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u670d\u52a1\u7aef\u4f1a\u53cd\u9988\u72b6\u6001\u4fe1\u606f\uff0c\u8fde\u63a5\u6210\u529f\u521b\u5efa\uff0c\u968f\u540e\u8fdb\u5165 normal \u9636\u6bb5\u3002 normal \u9636\u6bb5\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42\u81f3\u670d\u52a1\u7aef\uff0c\u670d\u52a1\u7aef\u6267\u884c\u547d\u4ee4\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\u5ba2\u6237\u7aef\u8bf7\u6c42\u7ed3\u675f\u540e\uff0c\u53ef\u4ee5\u4e3b\u52a8\u53d1\u9001\u6d88\u606f\u65ad\u5f00\u8fde\u63a5\u3002"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:'normal \u9636\u6bb5\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd "\u5b50\u534f\u8bae" \u6765\u53d1\u9001\u8bf7\u6c42\uff0c\u5206\u522b\u662f simpel query \u548c extened query\u3002'}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"simple query\uff1a\u5ba2\u6237\u7aef\u53d1\u9001\u5b57\u7b26\u4e32\u6587\u672c\u8bf7\u6c42\uff0c\u540e\u7aef\u6536\u5230\u540e\u7acb\u5373\u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c\u3002"}),"\n",(0,s.jsx)(e.li,{children:"extened query\uff1a\u53d1\u9001\u8bf7\u6c42\u7684\u8fc7\u7a0b\u88ab\u5206\u4e3a\u82e5\u5e72\u6b65\u9aa4\uff0c\u901a\u5e38\u5305\u62ec Parse\uff0cBind \u548c Execute\u3002Extended Query \u534f\u8bae\u5c06\u4ee5\u4e0a Simple Query \u7684\u5904\u7406\u6d41\u7a0b\u5206\u4e3a\u82e5\u5e72\u6b65\u9aa4\uff0c\u6bcf\u4e00\u6b65\u90fd\u7531\u5355\u72ec\u7684\u670d\u52a1\u7aef\u6d88\u606f\u8fdb\u884c\u786e\u8ba4\u3002\u8be5\u534f\u8bae\u53ef\u4ee5\u4f7f\u7528\u670d\u52a1\u7aef\u7684 perpared-statement \u529f\u80fd\uff0c\u5373\u5148\u53d1\u9001\u4e00\u6761\u53c2\u6570\u5316 SQL\uff0c\u670d\u52a1\u7aef\u6536\u5230 SQL\uff08Statement\uff09\u4e4b\u540e\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3001\u91cd\u5199\u5e76\u4fdd\u5b58\uff0c\u8fd9\u91cc\u4fdd\u5b58\u7684 Statement \u4e5f\u5c31\u662f\u6240\u8c13 Prepared-statement\uff0c\u53ef\u4ee5\u88ab\u590d\u7528\uff1b\u6267\u884c SQL \u65f6\uff0c\u76f4\u63a5\u83b7\u53d6\u4e8b\u5148\u4fdd\u5b58\u7684 Prepared-statement \u751f\u6210\u8ba1\u5212\u5e76\u6267\u884c\uff0c\u907f\u514d\u5bf9\u540c\u7c7b\u578b SQL \u91cd\u590d\u89e3\u6790\u548c\u91cd\u5199\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["\u8be6\u7ec6\u53ef\u53c2\u8003\uff1a",(0,s.jsx)(e.a,{href:"https://link.segmentfault.com/?enc=xLetT3WRikiuheWm%2BuZaDg%3D%3D.IyrytzplhW6gE1SzPUvwVdSO%2BckLC5vp%2FDStYD8wfesbj03PSnJgYnjgjFzA2ZCA",children:"postgresql\u901a\u4fe1\u534f\u8bae"}),(0,s.jsx)(e.br,{}),"\n",(0,s.jsx)(e.a,{href:"https://link.segmentfault.com/?enc=tkozWEVYzHaZmlzuhAPbdA%3D%3D.RBAIAR5%2FEcLJk9SfgvyZ8huSFrE%2B8wpsuQ7M8OucFTNOkLWrcaFGy%2FY5lN8DBqzlEDsevRKatW6dR7V6dTsxYA%3D%3D",children:"pg docs - protocol"})]}),"\n",(0,s.jsx)(e.h5,{id:"pg\u7248\u672c",children:"pg\u7248\u672c"}),"\n",(0,s.jsx)(e.p,{children:"12.4"}),"\n",(0,s.jsx)(e.h5,{id:"startup\u6d41\u7a0b",children:"startup\u6d41\u7a0b"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://segmentfault.com/img/bVcOCyL",alt:"image.png",title:"image.png"})}),"\n",(0,s.jsx)(e.h5,{id:"startup\u6d88\u606f\u7c7b\u578b",children:"startup\u6d88\u606f\u7c7b\u578b"}),"\n",(0,s.jsxs)(e.p,{children:["startup\u9636\u6bb5server\u7aef\u53d1\u9001\u7ed9client\u7aef\u7684\u6d88\u606f\u7c7b\u578b\u5982\u4e0b\u3002\u8be6\u7ec6\u53ef\u53c2\u7167",(0,s.jsx)(e.a,{href:"https://link.segmentfault.com/?enc=A7vhau%2Bo0l5JpZm5XXoAmA%3D%3D.ouT5vfeo4sFDVQIjiRAu257Lm3qQgBV54LAuIGPvN%2F5kptZQxeF7QiRDeV68ukhi",children:"postgresql\u901a\u4fe1\u534f\u8bae"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"case 'R':        \ncase 'S':        \ncase 'K':        \ncase 'Z':        \n"})}),"\n",(0,s.jsx)(e.p,{children:"client\u53d1\u7ed9server\u7aef\u7684\u6d88\u606f\u7c7b\u578b"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"case 'p':        \n"})}),"\n",(0,s.jsx)(e.h4,{id:"\u51fd\u6570\u8c03\u7528\u5173\u7cfb\u56fe",children:"\u51fd\u6570\u8c03\u7528\u5173\u7cfb\u56fe"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://segmentfault.com/img/bVcODHy",alt:"image",title:"image"})}),"\n",(0,s.jsx)(e.h4,{id:"startup\u7b80\u8981\u5206\u6790",children:"startup\u7b80\u8981\u5206\u6790"}),"\n",(0,s.jsxs)(e.p,{children:['\u53c2\u7167\u4e0a\u9762\u7684"startup\u6d41\u7a0b\u56fe"\uff0cclient\u7aef\u9996\u5148\u5411server\u7aef\u53d1\u9001startup package\u3002\u5728server\u7aefpostgres server process\u5904\u7406\u5e76\u521b\u5efa\u5bf9\u5e94\u7684backend process\u3002\u8be6\u7ec6\u53c2\u8003"',(0,s.jsx)(e.a,{href:"https://segmentfault.com/a/1190000039193129",children:"postgresql\u542f\u52a8\u5206\u6790"}),'"']}),"\n",(0,s.jsx)(e.h5,{id:"startup-package\u7ed3\u6784",children:"startup package\u7ed3\u6784"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"https://segmentfault.com/img/bVcOC12",alt:"image.png",title:"image.png"})}),"\n",(0,s.jsx)(e.h5,{id:"\u672c\u6587\u7ebf\u7d22",children:"\u672c\u6587\u7ebf\u7d22"}),"\n",(0,s.jsx)(e.p,{children:"\u672c\u6587\u4f1a\u7ed3\u5408\u4e00\u4e2a\u7ebf\u7d22\u6765\u68b3\u7406\u6d41\u7a0b\u3002\u5728startup package\u4e2dclient\u7aef\u53ef\u4ee5\u5305\u542b\u4e00\u4e2aapplication_name\uff0c\u6211\u4eec\u4f1a\u5206\u6790\u8fd9\u4e2a\u53c2\u6570\u5982\u4f55\u5728server\u7aef\u751f\u6548\u3002"}),"\n",(0,s.jsx)(e.h5,{id:"backendstartup\u5206\u6790",children:"BackendStartup\u5206\u6790"}),"\n",(0,s.jsxs)(e.p,{children:['BackendStartup\u662fpostmaster accept client\u7aef\u540e\u7684\u5165\u53e3\u51fd\u6570\uff0c\u8d1f\u8d23fork backend process\u3002\u4e3a\u5565\u662f\u5165\u53e3\u5462\uff0c\u53c2\u8003"',(0,s.jsx)(e.a,{href:"https://segmentfault.com/a/1190000039193129",children:"postgresql\u542f\u52a8\u5206\u6790"}),'"']}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"static int BackendStartup(Port *port)\n\n  Backend    *bn = (Backend *) malloc(sizeof(Backend));\n  pid = fork_process();\n  if (pid == 0)    \n  {\n      free(bn);\n\n\n      InitPostmasterChild();\n\n\n      ClosePostmasterPorts(false);\n\n\n      BackendInitialize(port);\n\n\n      BackendRun(port);\n  }\n"})}),"\n",(0,s.jsx)(e.h5,{id:"backendinitialize\u5206\u6790",children:"BackendInitialize\u5206\u6790"}),"\n",(0,s.jsxs)(e.p,{children:["BackendInitialize\u8d1f\u8d23backend\u4e2d\u8fdb\u4e00\u6b65\u7684\u521d\u59cb\u5316\uff0c\u5e76\u5904\u7406startup package\u3002",(0,s.jsx)(e.br,{}),"\n","\u6ce8\u610f\u5168\u5c40\u53d8\u91cfMyProcPort\u8d4b\u503c\u4e3aport\uff0c\u540e\u9762\u4f1a\u4f7f\u7528\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'static void BackendInitialize(Port *port)\n\n  MyProcPort = port;\n\n\n  pq_init();\n\n\n  whereToSendOutput = DestRemote; \n\n\n  InitializeTimeouts\n\n\n\n\n  pg_getnameinfo_all(&port->raddr.addr,remote_host,remote_port)\n\n\n\n  RegisterTimeout(STARTUP_PACKET_TIMEOUT, StartupPacketTimeoutHandler);\n  enable_timeout_after(STARTUP_PACKET_TIMEOUT, AuthenticationTimeout * 1000);\n\n\n\n  ProcessStartupPacket(port, false, false)\n\n\n  disable_timeout(STARTUP_PACKET_TIMEOUT, false);\n\n\n  check_on_shmem_exit_lists_are_empty\n\n\n  initStringInfo(&ps_data)\n  appendStringInfo(&ps_data, "%s", port->remote_host);\n  appendStringInfo(&ps_data, "(%s)", port->remote_port);\n\n\n  init_ps_display(ps_data.data);\n'})}),"\n",(0,s.jsx)(e.h5,{id:"processstartuppacket\u5206\u6790",children:"ProcessStartupPacket\u5206\u6790"}),"\n",(0,s.jsxs)(e.p,{children:["\u4e0b\u9762\u5355\u72ec\u5206\u6790BackendInitialize\u4e2d\u7684ProcessStartupPacket\u3002",(0,s.jsx)(e.br,{}),"\n","\u6700\u7ec8application_name\u88ab\u4fdd\u5b58\u5230port->guc_options\u548cport->application_name\u4e2d\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'static int ProcessStartupPacket(Port *port, bool ssl_done, bool gss_done)\n{\n\n  pq_getbytes((char *) &len, 1)\n  pq_getbytes(((char *) &len) + 1, 3) \n\n  len = pg_ntoh32(len);\n  len -= 4;\n\n\n  pq_getbytes(buf, len)\n\n\n  port->proto = proto = pg_ntoh32(*((ProtocolVersion *) buf));\n\n\n  if (proto == CANCEL_REQUEST_CODE)\n  {\n      processCancelRequest(port, buf);\n\n      return STATUS_ERROR;\n  }\n\n\n\n\n\n\n\n\n  if (proto == NEGOTIATE_SSL_CODE && !ssl_done)\n\n\n    if (send(port->sock, &SSLok, 1, 0) != 1)\n    return ProcessStartupPacket(port, true, SSLok == \'S\');\n  ......\n\n  else if (proto == NEGOTIATE_GSS_CODE && !gss_done)\n  ...\n\n\n\n\n  oldcontext = MemoryContextSwitchTo(TopMemoryContext);\n\n  port->guc_options = NIL;\n  while (offset < len)\n  {\n    if (strcmp(nameptr, "database") == 0)\n        port->database_name = pstrdup(valptr);\n    else if (strcmp(nameptr, "user") == 0)\n        port->user_name = pstrdup(valptr);\n    ......\n    else\n    {\n      port->guc_options = lappend(port->guc_options,pstrdup(nameptr));\n      port->guc_options = lappend(port->guc_options,pstrdup(valptr));\n\n\n\n      if (strcmp(nameptr, "application_name") == 0)\n      {\n        char       *tmp_app_name = pstrdup(valptr);\n        port->application_name = tmp_app_name;\n      }\n\n  ......\n\n  MemoryContextSwitchTo(oldcontext);\n'})}),"\n",(0,s.jsx)(e.h5,{id:"backendrun\u5206\u6790",children:"BackendRun\u5206\u6790"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'static void BackendRun(Port *port)\n  // \u4e3aPostgresMain\u51c6\u5907\u53c2\u6570\uff0c\u662f\u4ecepostmaster\u4e2d\u7684-o\u9009\u9879\u83b7\u53d6option(\u4fdd\u5b58\u4e8eExtraOptions)\n  // \u5177\u4f53\u53ef\u4ee5\u53c2\u8003https://segmentfault.com/a/1190000039193129\n  char      **av;\n  int    ac = 0;\n  av = (char **) MemoryContextAlloc(TopMemoryContext,\n                                      maxac * sizeof(char *));\n  av[ac++] = "postgres";\n  pg_split_opts(av, &ac, ExtraOptions);\n\n  MemoryContextSwitchTo(TopMemoryContext);\n\n  PostgresMain(ac, av, port->database_name, port->user_name);\n'})}),"\n",(0,s.jsx)(e.h5,{id:"postgresmain\u5206\u6790",children:"PostgresMain\u5206\u6790"}),"\n",(0,s.jsx)(e.p,{children:"PostgresMain\u662f\u6240\u6709backend process\u7684\u4e3b\u5165\u53e3\u51fd\u6570\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"void PostgresMain(int argc, char *argv[],\n             const char *dbname,\n             const char *username)\n  // \u6709\u4e00\u79cdstandalone\u7684\u6a21\u5f0f\uff0c\u4ee5\u53ca\u4f5c\u4e3awal sender\u3002\u6211\u4eec\u53ea\u5206\u6790\u4f5c\u4e3aclient\u7684backend process\u7684\u60c5\u51b5\u3002\n\n  // \u662f\u5426\u5411client\u53d1\u9001ready for query\u6d88\u606f\uff0c \u9ed8\u8ba4true\uff0c\u8868\u793astartup\u9636\u6bb5\u7ed3\u675f\u4f1a\u53d1\u9001\u3002\u5176\u5b83\u9636\u6bb5\u6bd4\u5982\u6bcf\u6b21simple query\u7ed3\u675f\u4e5f\u4f1a\u53d1\u9001\u3002\n  // \u8be6\u89c1\"startup\u6d88\u606f\u7c7b\u578b\"\n  // case 'Z':        /* backend is ready for new query */\n  volatile bool send_ready_for_query = true;\n\n  // \u53c2\u6570\u89e3\u6790\uff0c\u4f1a\u901a\u8fc7SetConfigOption\u8bbe\u7f6eGUC\uff0c\u8fd9\u91cc\u662f\u7b2c\u4e00\u6b21\u8c03\u7528\uff0c\u6a21\u5f0f\u4e3aPGC_POSTMASTER\uff0c\u662f\u4ecepostmaster\u4e2d\u7684-o\u9009\u9879\u83b7\u53d6option(\u4fdd\u5b58\u4e8eExtraOptions)\u3002\u540e\u9762\u8fd8\u4f1a\u6709\u7b2c\u4e8c\u6b21\u8c03\u7528\uff0c\u5bf9\u5e94\u4ececlient\u7aef\u83b7\u53d6\u7684option\uff0c\u6a21\u5f0f\u4e3aPGC_BACKEND\uff0cPGC_SU_BACKEND\u3002\n  // \"TODO\": SetConfigOption \u8bbe\u7f6eGUC\u89e3\u6790(\u7279\u522b\u662fctx\u533a\u522b)\n  process_postgres_switches(argc, argv, PGC_POSTMASTER, &dbname);\n\n  // signal\u91cd\u65b0\u6ce8\u518c\n  pqsignal(SIGHUP, SignalHandlerForConfigReload);\n  pqsignal(SIGINT, StatementCancelHandler);    /* cancel current query */\n  pqsignal(SIGTERM, die); \n  pqsignal(SIGQUIT, quickdie);\n  pqsignal(SIGPIPE, SIG_IGN);\n  pqsignal(SIGUSR1, procsignal_sigusr1_handler);\n  pqsignal(SIGUSR2, SIG_IGN);\n  pqsignal(SIGFPE, FloatExceptionHandler);\n  pqsignal(SIGCHLD, SIG_DFL);\n\n  // per process\u7684\u4e00\u4e9binit\uff0cSemaphore...\n  // !!! TODO: detailed parse\n  InitProcess();\n\n  // \u57fa\u672c\u7684\u521d\u59cb\u5316\uff0cbufferpool\uff0ctimer, portal manager, GUC, process setting...\n  // \u7279\u522b\u7684\uff0capplication_name\u8bbe\u7f6e\u5230GUC\u4e5f\u5728\u8fd9\u91cc\n  // \u4e0b\u9762\u4f1a\u5355\u72ec\u4ecb\u7ecd\n  InitPostgres(dbname, InvalidOid, username, InvalidOid, NULL, false);\n\n  // \u5220\u9664PostmasterContext\uff0cbackend\u4e0d\u518d\u9700\u8981\u8bbf\u95eepostmaster\u7684context\u4e86\n  if (PostmasterContext)\n  {\n      MemoryContextDelete(PostmasterContext);\n      PostmasterContext = NULL;\n  }\n\n  // \u5411client report parameter status\n  // \u53ea\u53d1\u9001GUC\u4e2dGUC_REPORT\u7c7b\u578b\u7684\u53c2\u6570(auto-report changes to client)\n  // \u53c2\u7167\"startup\u6d88\u606f\u7c7b\u578b\"\n  // case 'S':        /* parameter status */\n  // !!!TODO\uff1a\u53c2\u6570\u4e3e\u4f8b\n  // \u8fd9\u91cc\u6ca1\u6709\u8c03\u7528pq_flush()\uff0c\u76f4\u5230ready for query\u624d\u4f1a\u4e00\u8d77\u53d1\u9001\n  BeginReportingGUCOptions();\n    // -- parse BeginReportingGUCOptions\n    for (i = 0; i < num_guc_variables; i++)\n    {\n        struct config_generic *conf = guc_variables[i];\n\n        if (conf->flags & GUC_REPORT)\n            ReportGUCOption(conf);\n            // -- parse ReportGUCOption\n            if (reporting_enabled && (record->flags & GUC_REPORT))\n              pq_beginmessage(&msgbuf, 'S');\n              pq_sendstring(&msgbuf, record->name);\n              pq_sendstring(&msgbuf, val);\n              pq_endmessage(&msgbuf);\n    }\n\n  process_session_preload_libraries();\n\n  // \u5411client\u53d1\u9001 secret key\u6570\u636e\n  // \u53c2\u7167\"startup\u6d88\u606f\u7c7b\u578b\"\n  // case 'K':        /* secret key data from the backend */\n  // \u8fd9\u91cc\u6ca1\u6709\u8c03\u7528pq_flush()\uff0c\u76f4\u5230ready for query\u624d\u4f1a\u4e00\u8d77\u53d1\u9001\n  if (whereToSendOutput == DestRemote)\n  {\n      StringInfoData buf;\n\n      pq_beginmessage(&buf, 'K');\n      pq_sendint32(&buf, (int32) MyProcPid);\n      pq_sendint32(&buf, (int32) MyCancelKey);\n      pq_endmessage(&buf);\n  }\n\n  // \u521b\u5efaMessageContext\uff0c\u8fd9\u662f\u7ed9\u6d88\u606f\u5904\u7406\u7528\uff0c\u6bcf\u4e00\u8f6e\u5faa\u73af\u4f1a\u91cd\u7f6e\n  MessageContext = AllocSetContextCreate(TopMemoryContext, \"MessageContext\");\n\n  // \u521b\u5efaRowDescriptionContext\uff0c\u7528\u4e8eRowDescription messages\n  row_description_context = AllocSetContextCreate(TopMemoryContext, \"RowDescriptionContext\",\n\n  MemoryContextSwitchTo(row_description_context);\n  initStringInfo(&row_description_buf);\n  MemoryContextSwitchTo(TopMemoryContext);\n\n  // \u5f02\u5e38\u6062\u590d\u7684\u5165\u53e3\n  if (sigsetjmp(local_sigjmp_buf, 1) != 0)\n  {\n    ......\n  }\n\n  // \u4e3b\u5faa\u73af\n  for (;;)\n  {\n    // \u521d\u59cb\u5316\n      doing_extended_query_message = false;\n\n    // \u4e0a\u9762\u63d0\u5230\u7684MessageContext\u91cd\u7f6e\n      MemoryContextSwitchTo(MessageContext);\n      MemoryContextResetAndDeleteChildren(MessageContext);\n\n      initStringInfo(&input_message);\n      InvalidateCatalogSnapshotConditionally();\n\n    if (send_ready_for_query)\n    {\n      if (IsAbortedTransactionBlockState())\n      else if (IsTransactionOrTransactionBlock())\n      else {\n        ProcessCompletedNotifies();\n        pgstat_report_stat(false);\n        set_ps_display(\"idle\");\n        pgstat_report_activity(STATE_IDLE, NULL);\n      }\n\n      // \u8be6\u89c1\"startup\u6d88\u606f\u7c7b\u578b\"\n      // case 'Z':   /* backend is ready for new query */\n      ReadyForQuery(whereToSendOutput);\n      send_ready_for_query = false;\n    }\n\n    // \u5230\u8fd9\u91ccstartup\u9636\u6bb5\u5c31\u7ed3\u675f\u4e86\uff0c\u63a5\u4e0b\u6765\u662fnormal\u9636\u6bb5\u7684\u6d88\u606f\u5904\u7406\n    // \u4e0b\u9762\u4ee5simple query\u4e3a\u4f8b\n\n    // \u8bfb\u53d6command\n    firstchar = ReadCommand(&input_message);\n\n    // \u5206\u60c5\u51b5\u5904\u7406command\n    switch (firstchar)\n    {\n        // 'Q':            /* simple query */\n        case 'Q':            /* simple query */\n            {\n                const char *query_string;\n\n                /* Set statement_timestamp() */\n                SetCurrentStatementStartTimestamp();\n\n                query_string = pq_getmsgstring(&input_message);\n                pq_getmsgend(&input_message);\n\n                if (am_walsender)\n                {\n                    if (!exec_replication_command(query_string))\n                        exec_simple_query(query_string);\n                }\n                else\n                    // \u6267\u884csimple query\n                    exec_simple_query(query_string);\n\n                send_ready_for_query = true;\n            }\n            break;\n\n        // \u5176\u5b83\u7c7b\u578b\u6d88\u606f\u5904\u7406, bind, parse......\n"})}),"\n",(0,s.jsx)(e.h5,{id:"initpostgres\u4ecb\u7ecd",children:"InitPostgres\u4ecb\u7ecd"}),"\n",(0,s.jsx)(e.p,{children:"InitPostgres\u5728PostgresMain\u4e2d\u8c03\u7528\uff0c\u8fdb\u884c\u57fa\u672c\u7684\u521d\u59cb\u5316\uff0cbufferpool\uff0ctimer, portal manager, GUC, process setting...\u3002"}),"\n",(0,s.jsx)(e.p,{children:"\u7279\u522b\u7684\uff0capplication_name\u8bbe\u7f6e\u5230GUC\u4e5f\u5728\u8fd9\u91cc\u3002authentication\u4e5f\u53d1\u751f\u5728\u8fd9\u91cc\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'void\nInitPostgres(const char *in_dbname, Oid dboid, const char *username,\n             Oid useroid, char *out_dbname, bool override_allow_connections)\n{\n  bool        bootstrap = IsBootstrapProcessingMode();\n\n  // InitProcess\u4e2d\u521d\u59cb\u5316\u7684process\u4fe1\u606f\u5728\u8fd9\u91cc\u7528\u5230\u4e86\n  InitProcessPhase2();\n\n  // shared-invalidation manager\u76f8\u5173\n  // !!! TODO\uff1a detailed parse\n  MyBackendId = InvalidBackendId;\n  SharedInvalBackendInit(false);\n  ProcSignalInit(MyBackendId);\n\n  // timer \u6ce8\u518c\n  if (!bootstrap)\n  {\n      RegisterTimeout(DEADLOCK_TIMEOUT, CheckDeadLockAlert);\n      RegisterTimeout(STATEMENT_TIMEOUT, StatementTimeoutHandler);\n      RegisterTimeout(LOCK_TIMEOUT, LockTimeoutHandler);\n      RegisterTimeout(IDLE_IN_TRANSACTION_SESSION_TIMEOUT,\n                      IdleInTransactionSessionTimeoutHandler);\n  }\n\n  // init buffer pool\n  InitBufferPoolBackend();\n\n  // xlog recovery\u68c0\u67e5\n  // !!!TODO: detailed parse\n  (void) RecoveryInProgress();\n\n  //\u521d\u59cb\u5316relation cache\u548csystem catalog caches\n  RelationCacheInitialize();\n  InitCatalogCache();\n  InitPlanCache();\n\n  // \u521d\u59cb\u5316portal manager\n  // !!!TODO: detailed parse\n  EnablePortalManager();\n\n  // stats collection\u521d\u59cb\u5316\n  pgstat_initialize();\n\n  RelationCacheInitializePhase2();\n\n  // \u6ce8\u518cprocess-exit callback\uff0c\u7528\u6765\u8fdb\u884cpre-shutdown cleanup\n  before_shmem_exit(ShutdownPostgres, 0);\n\n  // start \u4e00\u4e2atransaction\uff0c\u83b7\u53d6snapshot\n  // \u53ea\u7528\u4e8e\u540e\u9762\u7684\u5404\u79cd\u8868\u7684\u8bbf\u95ee\uff0c\u4f1a\u5728\u672c\u51fd\u6570\u7ed3\u5c3eend\n  // !!! TODO: detailed parse\n  if (!bootstrap){\n    SetCurrentStatementStartTimestamp();\n    StartTransactionCommand();\n    XactIsoLevel = XACT_READ_COMMITTED;\n    (void) GetTransactionSnapshot();\n   }\n\n  // authentication\n  // !!!! TODO: detailed parse\n  else\n  {\n      /* normal multiuser case */\n      Assert(MyProcPort != NULL);\n      PerformAuthentication(MyProcPort);\n      InitializeSessionUserId(username, useroid);\n      am_superuser = superuser();\n  }\n\n  // \u4ecepg_database\u8868\u4e2d\u83b7\u53d6client\u6307\u5b9a\u8fde\u63a5\u7684database\u7684oid\uff0ctable space oid\uff0c\u5b58\u5230MyDatabaseId\uff0c MyDatabaseTableSpace\u3002\n  else if (in_dbname != NULL)\n  {\n      HeapTuple    tuple;\n      Form_pg_database dbform;\n\n      tuple = GetDatabaseTuple(in_dbname);\n      if (!HeapTupleIsValid(tuple))\n          ereport(FATAL,\n                  (errcode(ERRCODE_UNDEFINED_DATABASE),\n                   errmsg("database \\"%s\\" does not exist", in_dbname)));\n      dbform = (Form_pg_database) GETSTRUCT(tuple);\n      MyDatabaseId = dbform->oid;\n      MyDatabaseTableSpace = dbform->dattablespace;\n      /* take database name from the caller, just for paranoia */\n      strlcpy(dbname, in_dbname, sizeof(dbname));\n  }\n\n  // \u83b7\u5f97client\u8fde\u63a5database\u7684\u8bfb\u5199\u9501\n  LockSharedObject(DatabaseRelationId, MyDatabaseId, 0, RowExclusiveLock);\n\n  // \n  MyProc->databaseId = MyDatabaseId;\n\n  // \u8bbe\u7f6e\u5f53\u524dcatalog snapshot\u4e3ainvalid\n  // !!!TODO:detailed parse\n  InvalidateCatalogSnapshot();\n\n  // \u83b7\u53d6database path\n  // \u6bcf\u4e2a\u6570\u636e\u5e93\u90fd\u6709\u5bf9\u5e94\u7684\u5b58\u50a8\u76ee\u5f55\uff0c\u4f8b\u5982\u4e0b\u9762base\u4e3atable space\uff0c123000\u4e3a\u8fd9\u4e2adb\u7684oid\uff0c\u53ef\u4ee5\u901a\u8fc7pg_database\u67e5\u8be2 - select oid, datname from pg_database;\n  // /usr/local/pgsql/data4/base/123000/\n  fullpath = GetDatabasePath(MyDatabaseId, MyDatabaseTableSpace);\n\n  // \u68c0\u67e5\u6570\u636e\u5e93\u76ee\u5f55\n  if (access(fullpath, F_OK) == -1)\n  ValidatePgVersion(fullpath);\n\n  // \u8bb0\u5f55\u6570\u636e\u5e93\u76ee\u5f55\u5230\u5168\u5c40\u53d8\u91cfDatabasePath\n  SetDatabasePath(fullpath);\n\n  RelationCacheInitializePhase3();\n  initialize_acl();\n\n  // \u8bfb\u53d6pg_database\uff0c\u5e76\u8bbe\u7f6eGUC: server_encoding\uff0c client_encoding, lc_collate, lc_ctype\n  CheckMyDatabase(dbname, am_superuser, override_allow_connections);\n\n  // \u4f1a\u628aport->guc_options\u4e2d\u7684option\u8bbe\u7f6e\u5230GUC\u4e2d\n  // client\u53d1\u9001\u7684application_name\u4e5f\u88ab\u8bbe\u7f6e\u5230GUC\u4e2d\u4e86\n  // \u6211\u4eec\u7684\u7ebf\u7d22\u4e5f\u5230\u6b64\u4e3a\u6b62\u4e86\uff0c\u56de\u5fc6\u4e00\u4e0b\uff1a\n  // MyProcPort\u662f\u5728BackendInitialize\u4e2d\u88ab\u8bbe\u7f6e\u4e3aport\n  // \u800cclient\u53d1\u9001\u7684application_name\u662f\u5728BackendInitialize\u8c03\u7528\u7684ProcessStartupPacket\u4e2d\u88ab\u8bb0\u5f55\u5230port->guc_options\u3002\n  if (MyProcPort != NULL)\n    process_startup_options(MyProcPort, am_superuser);\n\n  // pg_db_role_setting\u4e2dload setting\u5e76\u4e14\u8bbe\u7f6e\u5230\u6570\u636e\u5e93\n  // !!!!TODO: detailed parse\n  process_settings(MyDatabaseId, GetSessionUserId());\n\n  // search path\u8bbe\u7f6e\n  InitializeSearchPath();\n\n  // client encoding\u8bbe\u7f6e\n  InitializeClientEncoding();\n\n  // session \u8bbe\u7f6e\n  InitializeSession();\n\n  // pgstat start\n  pgstat_bestart();\n\n  // \u5173\u95ed\u4e0a\u9762\u5f00\u59cb\u7684transaction\n  CommitTransactionCommand();\n}\n'})}),"\n",(0,s.jsx)(e.h5,{id:"performauthentication\u5206\u6790",children:"PerformAuthentication\u5206\u6790"}),"\n",(0,s.jsx)(e.p,{children:'InitPostgres\u4e2d\u8c03\u7528\u4e86PerformAuthentication\u8fdb\u884cauthentication\u3002\u6b64\u64cd\u4f5c\u5bf9\u5e94"startup\u6d41\u7a0b"\u90e8\u5206\u7684authentication request/authentication ok\u3002'}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'static void\nPerformAuthentication(Port *port)\n{\n  ClientAuthInProgress = true;\n\n  enable_timeout_after(STATEMENT_TIMEOUT, AuthenticationTimeout * 1000);\n\n\n  set_ps_display("authentication");\n\n\n  ClientAuthentication(port);\n\n  disable_timeout(STATEMENT_TIMEOUT, false);\n\n  set_ps_display("startup");\n  ClientAuthInProgress = false;\n}\n'})}),"\n",(0,s.jsx)(e.h5,{id:"clientauthentication\u5206\u6790",children:"ClientAuthentication\u5206\u6790"}),"\n",(0,s.jsx)(e.p,{children:"ClientAuthentication\u662fauthentication\u4e3b\u51fd\u6570\u3002"}),"\n",(0,s.jsx)(e.p,{children:"postgresql\u652f\u6301\u4e0b\u9762\u7684authentication\u65b9\u6cd5\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"typedef enum UserAuth\n{\n    uaReject,\n    uaImplicitReject,            \n    uaTrust,\n    uaIdent,\n    uaPassword,\n    uaMD5,\n    uaSCRAM,\n    uaGSS,\n    uaSSPI,\n    uaPAM,\n    uaBSD,\n    uaLDAP,\n    uaCert,\n    uaRADIUS,\n    uaPeer\n} UserAuth\n"})}),"\n",(0,s.jsx)(e.p,{children:"postgresql\u5411client\u53d1\u9001\u7684authentication code\u3002"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"#define AUTH_REQ_OK            0    \n#define AUTH_REQ_KRB4        1    \n#define AUTH_REQ_KRB5        2    \n#define AUTH_REQ_PASSWORD    3    \n#define AUTH_REQ_CRYPT        4    \n#define AUTH_REQ_MD5        5    \n#define AUTH_REQ_SCM_CREDS    6    \n#define AUTH_REQ_GSS        7    \n#define AUTH_REQ_GSS_CONT    8    \n#define AUTH_REQ_SSPI        9    \n#define AUTH_REQ_SASL       10    \n#define AUTH_REQ_SASL_CONT 11    \n#define AUTH_REQ_SASL_FIN  12    \n\ntypedef uint32 AuthRequest;\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"void\nClientAuthentication(Port *port)\n{\n  // \u8bfb\u53d6pg_hba.conf\uff0c\u67e5\u627e\u4e0e\u672cclient\u7b26\u5408\u7684rule\n  // \u8bb0\u5f55\u5230port->hba\n  hba_getauthmethod(port);\n    // -- parse hba_getauthmethod\n    check_hba(port);\n      roleid = get_role_oid(port->user_name, true);\n\n      // parsed_hba_lines\u662f\u5728load_hba\u4e2d\u89e3\u6790\u8fc7\u7684\uff0c\u8be6\u89c1\n      // https://segmentfault.com/a/1190000039193129\n      foreach(line, parsed_hba_lines){\n        check_hostname\n        check_ip\n        check_same_host_or_net\n        check_db\n        check_role\n        ... \n\n  CHECK_FOR_INTERRUPTS();\n\n  // \u9488\u5bf9\u4e0d\u540c\u641e\u7684authentication method\u8fdb\u884c\u5904\u7406\uff0c\u4e0b\u9762\u53ea\u5217\u4e3e\u5e38\u89c1\u7684password\u65b9\u5f0f, \u4ee5\u53catrust\u65b9\u5f0f\n  switch (port->hba->auth_method)\n  { \n    // password\u65b9\u5f0f\uff0c\u4f1a\u8981\u6c42client\u53d1\u9001password\n    case uaPassword:\n      status = CheckPasswordAuth(port, &logdetail);\n        // -- parse CheckPasswordAuth\n        // \u5411client\u53d1\u9001authentication request\uff0ccode \u4e3aAUTH_REQ_PASSWORD\n        sendAuthRequest(port, AUTH_REQ_PASSWORD, NULL, 0);\n          // -- parse sendAuthRequest\n          // \u53c2\u7167\"startup\u6d88\u606f\u7c7b\u578b\"\n          // case 'R':        /* Authentication Request */\n          pq_beginmessage(&buf, 'R');\n          pq_sendint32(&buf, (int32) areq);\n          pq_endmessage(&buf);\n        passwd = recv_password_packet(port);\n          // -- parse recv_password_packet\n          // \u53c2\u7167\"startup\u6d88\u606f\u7c7b\u578b\"\n          // case 'p':        /* password */\n          pq_startmsgread();\n          mtype = pq_getbyte();\n          if (mtype != 'p')\n\n          initStringInfo(&buf);\n          if (pq_getmessage(&buf, 0))\n\n        // \u83b7\u53d6role\u5bf9\u5e94\u7684password\n        // \u672c\u5730\u5b58\u50a8\u7684\u662fshadow_pass(password\u7684hash)\n        shadow_pass = get_role_password(port->user_name, logdetail);\n\n        // client\u53d1\u9001\u7684password\u8fdb\u884c\u6bd4\u8f83\n        result = plain_crypt_verify(port->user_name, shadow_pass, passwd, logdetail);\n      break;\n\n    // trust\u7c7b\u578b\uff0c\u5219\u4e0d\u9700\u8981authentication\n    // \u4f8b\u5982\uff0cpg_hba.conf\u4e2d\u914d\u7f6e\n    // TYPE  DATABASE        USER            ADDRESS          METHOD\n    // host    all             all             0.0.0.0/0      trust\n    case uaTrust:\n      status = STATUS_OK;\n      break;\n    }\n\n\n    // \u6839\u636eauthentication\u7684\u7ed3\u679c\n    // \u5411client\u53d1\u9001\u7ed3\u679c\uff0c\u6d88\u606f\u7c7b\u578b\u4e3a'R'\u3002 \u5982\u6210\u529f\uff0c\u5219\u4e3aauthenticon ok(0)\n    // case 'R':        /* Authentication Request */\n    if (status == STATUS_OK)\n        sendAuthRequest(port, AUTH_REQ_OK, NULL, 0);\n        // -- parse sendAuthRequest\n        // \u7c7b\u4f3c\u4e0a\u9762\u5206\u6790\u7684\uff0c\u6b64\u5904\u53d1\u9001\u7684\u6d88\u606f\u7c7b\u578b\u4e3aauthentication request, \u4f46\u662fquthentication request code\u4e3aAUTH_REQ_OK\n        // case 'R':        /* Authentication Request */\n        // \u4f46\u662f\u8fd9\u91cc\u6ca1\u6709\u7acb\u523b\u53d1\u9001\uff0c\u800c\u662f\u7b49\u5230ready for queries\u65f6\u53d1\u9001\n        // \u6ca1\u6709\u8c03\u7528pq_flush()\n        if (areq != AUTH_REQ_OK && areq != AUTH_REQ_SASL_FIN)\n          pq_flush();\n\n    else\n        auth_failed(port, status, logdetail);\n}\n"})}),"\n",(0,s.jsx)(e.h5,{id:"\u6293\u5305\u5206\u6790",children:"\u6293\u5305\u5206\u6790"}),"\n",(0,s.jsx)(e.p,{children:"pg_hba.conf\u4e2d\u914d\u7f6etrust\u6a21\u5f0f"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"host    all             all             0.0.0.0/0               trust\n"})}),"\n",(0,s.jsx)(e.h6,{id:"\u6d4b\u8bd5\u6b65\u9aa4",children:"\u6d4b\u8bd5\u6b65\u9aa4"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"1. server\u7aef\u5f00\u59cbtcpdump\n\n# tcpdump -i eth1 -s0 -nnX -w startup_trust.cap\n\n2. psql\u8fde\u63a5server\n# psql  -p 5436 -U postgres -h 172.28.128.18\n\n3. server\u7aef\u505c\u6b62tcpdump\n ctrl-c\n\n4. \u7528wireshark\u67e5\u770bcap\u5305\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.img,{src:"https://segmentfault.com/img/bVcOEee",alt:"image.png",title:"image.png"}),(0,s.jsx)(e.br,{}),"\n","\u7c7b\u578b\u4e3aPSH\uff0c\u65b9\u5411\u4e3aclient\u5230server\u7684\u4e3astartup package\u3002data\u4e2d\u53ef\u4ee5\u770b\u5230\u5bf9\u5e94\u7684\u6d88\u606f\u4f53\uff0c\u5176\u4e2d\u5305\u542b\u5982\u4e0boptions"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"database postgres, application_name psql, client_encoding UTF8\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.img,{src:"https://segmentfault.com/img/bVcOEew",alt:"image.png",title:"image.png"}),(0,s.jsx)(e.br,{}),"\n","\u7c7b\u578b\u4e3aPSH\uff0c\u65b9\u5411\u4e3aclient\u5230server\u7684\u662f\u4e00\u4e2a\u5927\u6d88\u606f\u3002\u67e5\u770bdata\u4e2d\u5bf9\u5e94\u7684\u6d88\u606f\u4f53\u5185\u5bb9\u3002\u6211\u4eec\u4e0a\u9762\u5206\u6790\u8fc7\u5728R\uff0cS\uff0cK\u6d88\u606f\u540e\u6ca1\u6709\u8fdb\u884cpg_flush\uff0c\u800c\u662f\u76f4\u5230Z\u4e00\u8d77flush\u540e\u53d1\u9001\u7ed9client\u3002"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"'R' : authentication ok\n'S' : parameter status(application_name \n...\n      client_encoding \n      is_superuser \n      IntervalStyle \n      server_encoding \n      session_autherization \n      server_version \n      TimeZone \n'K' : secret \n'Z' : ready \n"})}),"\n",(0,s.jsx)(e.h5,{id:"\u7ed3\u8bed",children:"\u7ed3\u8bed"}),"\n",(0,s.jsx)(e.p,{children:"\u672c\u6587\u5206\u6790\u4e86startup\u7684\u4e3b\u8981\u6d41\u7a0b\uff0c\u5e76\u4e14\u4ee5application_name\u4e3a\u7ebf\u7d22\uff0c\u5e2e\u52a9\u66f4\u8fde\u8d2f\u7684\u7406\u89e3\u6574\u4f53\u6d41\u7a0b\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5bf9backend process\u6709\u4e86\u66f4\u6df1\u5165\u7406\u89e3\uff0c\u5176process\u7ba1\u7406\uff0csignal\uff0csemaphore\uff0cGUC\uff0c\u4e0eclient\u95f4\u7684\u901a\u4fe1\u6a21\u578b\uff0c\u6d88\u606f\u7ed3\u6784\u7b49\u7b49\u3002"}),"\n",(0,s.jsx)(e.h5,{id:"qa",children:"Q&A"}),"\n",(0,s.jsx)(e.p,{children:"\u6682\u65e0"}),"\n",(0,s.jsx)(e.h5,{id:"\u9057\u7559\u95ee\u9898",children:"\u9057\u7559\u95ee\u9898"}),"\n",(0,s.jsx)(e.p,{children:"\u8fd8\u6709\u5f88\u591a\u5730\u65b9\u6ca1\u6709\u8fdb\u884c\u8be6\u7ec6\u5206\u6790(\u7279\u522b\u662fmark TODO\u7684)\uff0c\u540e\u7eed\u518d\u505a\u8fdb\u4e00\u6b65\u5206\u6790\u3002"})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}}}]);