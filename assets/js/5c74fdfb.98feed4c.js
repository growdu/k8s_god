"use strict";(self.webpackChunkk_8_s_god=self.webpackChunkk_8_s_god||[]).push([[8272],{28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var n=s(96540);const c={},a=n.createContext(c);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),n.createElement(a.Provider,{value:t},e.children)}},32523:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>g});const n=JSON.parse('{"id":"pgsql/storage/pg_checksum","title":"pg_checksum","description":"pg\u5728\u5c06\u6570\u636e\u5199\u5165\u78c1\u76d8\u65f6\u624d\u4f1a\u8fdb\u884cchecksum\u7684\u8ba1\u7b97\u5199\u5165\u3002","source":"@site/docs/pgsql/storage/pg_checksum.md","sourceDirName":"pgsql/storage","slug":"/pgsql/storage/pg_checksum","permalink":"/blog/docs/pgsql/storage/pg_checksum","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pgsql/storage/pg_checksum.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pg\u5185\u5b58\u7ba1\u7406","permalink":"/blog/docs/pgsql/storage/mm/pgsql\u5185\u5b58\u7ba1\u7406"},"next":{"title":"pgsql \u5b58\u50a8\u7ba1\u7406","permalink":"/blog/docs/pgsql/storage/pgsql_storage"}}');var c=s(74848),a=s(28453);const r={},o="pg_checksum",p={},g=[{value:"\u5199\u5165\u6d41\u7a0b",id:"\u5199\u5165\u6d41\u7a0b",level:2},{value:"\u68c0\u6d4b",id:"\u68c0\u6d4b",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",mermaid:"mermaid",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"pg_checksum",children:"pg_checksum"})}),"\n",(0,c.jsx)(t.p,{children:"pg\u5728\u5c06\u6570\u636e\u5199\u5165\u78c1\u76d8\u65f6\u624d\u4f1a\u8fdb\u884cchecksum\u7684\u8ba1\u7b97\u5199\u5165\u3002"}),"\n",(0,c.jsx)(t.h2,{id:"\u5199\u5165\u6d41\u7a0b",children:"\u5199\u5165\u6d41\u7a0b"}),"\n",(0,c.jsx)(t.mermaid,{value:"graph TB\nPageSetChecksumCopy--\x3epg_checksum_page--\x3epg_checksum_block"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-c",children:"char *\nPageSetChecksumCopy(Page page, BlockNumber blkno)\n{\n\tstatic char *pageCopy = NULL;\n\n\t/* If we don't need a checksum, just return the passed-in data */\n\tif (PageIsNew(page) || !DataChecksumsEnabled()) // \u65b0\u9875\u6216\u8005\u662f\u672a\u5f00\u542fchecksum\u76f4\u63a5\u8fd4\u56de\n\t\treturn (char *) page;\n\n\t/*\n\t * We allocate the copy space once and use it over on each subsequent\n\t * call.  The point of palloc'ing here, rather than having a static char\n\t * array, is first to ensure adequate alignment for the checksumming code\n\t * and second to avoid wasting space in processes that never call this.\n\t */\n\tif (pageCopy == NULL)\n\t\tpageCopy = MemoryContextAlloc(TopMemoryContext, BLCKSZ);\n\t\n    // \u5c06\u9875\u62f7\u8d1d\u4e00\u4efd\n\tmemcpy(pageCopy, (char *) page, BLCKSZ);\n\t((PageHeader) pageCopy)->pd_checksum = pg_checksum_page(pageCopy, blkno);\n\treturn pageCopy;\n}\n"})}),"\n",(0,c.jsx)(t.h2,{id:"\u68c0\u6d4b",children:"\u68c0\u6d4b"}),"\n",(0,c.jsx)(t.mermaid,{value:"graph TB\nPageIsVerifiedExtended--\x3epg_checksum_page--\x3epg_checksum_block"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-c"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);