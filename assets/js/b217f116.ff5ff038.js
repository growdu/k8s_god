"use strict";(self.webpackChunkk_8_s_god=self.webpackChunkk_8_s_god||[]).push([[6297],{13328:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>k,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"dpdk/dpdk\u4e4bkni\u4f7f\u7528","title":"dpdk\u4e4bkni\u4f7f\u7528","description":"\u4ec0\u4e48\u662fkni","source":"@site/docs/dpdk/dpdk\u4e4bkni\u4f7f\u7528.md","sourceDirName":"dpdk","slug":"/dpdk/dpdk\u4e4bkni\u4f7f\u7528","permalink":"/blog/docs/dpdk/dpdk\u4e4bkni\u4f7f\u7528","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dpdk/dpdk\u4e4bkni\u4f7f\u7528.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"day1","permalink":"/blog/docs/dpdk/day1"},"next":{"title":"dpdk\u5e38\u7528\u63a5\u53e3\u6307\u5317","permalink":"/blog/docs/dpdk/dpdk\u5e38\u7528\u63a5\u53e3\u6307\u5317"}}');var t=i(74848),l=i(28453);const r={},c="dpdk\u4e4bkni\u4f7f\u7528",d={},a=[{value:"\u4ec0\u4e48\u662fkni",id:"\u4ec0\u4e48\u662fkni",level:2},{value:"kni\u4f18\u52bf",id:"kni\u4f18\u52bf",level:3},{value:"kni\u4ee3\u7801\u5206\u6790",id:"kni\u4ee3\u7801\u5206\u6790",level:2},{value:"dpdk mbuf\u4e0esk_buf\u8f6c\u6362",id:"dpdk-mbuf\u4e0esk_buf\u8f6c\u6362",level:3},{value:"kni\u8fd0\u884c",id:"kni\u8fd0\u884c",level:2},{value:"\u7f16\u8bd1",id:"\u7f16\u8bd1",level:3},{value:"\u6267\u884c",id:"\u6267\u884c",level:3},{value:"\u5b9a\u4f4d\u8ffd\u8e2a",id:"\u5b9a\u4f4d\u8ffd\u8e2a",level:3},{value:"\u6d4b\u8bd5",id:"\u6d4b\u8bd5",level:2}];function o(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"dpdk\u4e4bkni\u4f7f\u7528",children:"dpdk\u4e4bkni\u4f7f\u7528"})}),"\n",(0,t.jsx)(e.h2,{id:"\u4ec0\u4e48\u662fkni",children:"\u4ec0\u4e48\u662fkni"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"Kni(Kernel NIC Interface)\u5185\u6838\u7f51\u5361\u63a5\u53e3\uff0c\u662fDPDK\u5141\u8bb8\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u4ea4\u6362\u62a5\u6587\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6a21\u62df\u4e86\u4e00\u4e2a\u865a\u62df\u7684\u7f51\u53e3\uff0c\u63d0\u4f9bdpdk\u7684\u5e94\u7528\u7a0b\u5e8f\u548clinux\u5185\u6838\u4e4b\u95f4\u901a\u8baf\u3002kni\u63a5\u53e3\u5141\u8bb8\u62a5\u6587\u4ece\u7528\u6237\u6001\u63a5\u6536\u540e\u8f6c\u53d1\u5230linu\u534f\u8bae\u6808\u53bb\u3002 \u4e3a\u4ec0\u4e48\u8981\u5f04\u4e00\u4e2akni\u63a5\u53e3\uff0c\u867d\u7136dpdk\u7684\u9ad8\u901f\u8f6c\u53d1\u6027\u80fd\u5f88\u51fa\u8272\uff0c\u4f46\u662f\u4e5f\u6709\u81ea\u5df1\u7684\u4e00\u4e9b\u7f3a\u70b9\uff0c\u6bd4\u5982\u6ca1\u6709\u534f\u8bae\u6808\u5c31\u662f\u5176\u4e2d\u4e00\u9879\u7f3a\u9677\uff0c\u5f53\u7136\u4e5f\u53ef\u80fd\u5f53\u65f6\u8bbe\u8ba1\u65f6\u5c31\u5c06\u6ca1\u6709\u5c06\u534f\u8bae\u6808\u8003\u8651\u8fdb\u53bb\uff0c\u6bd5\u7adf\u534f\u8bae\u6808\u9700\u8981\u5c06\u62a5\u6587\u8f6c\u53d1\u5904\u7406\uff0c\u53ef\u80fd\u4f1a\u4f7f\u5904\u7406\u62a5\u6587\u7684\u80fd\u529b\u5927\u5927\u964d\u4f4e\u3002"}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"\u5f53kni\u5411linux\u53d1\u9001\u62a5\u6587\u65f6\u901a\u8fc7\u8c03\u7528netif_rx()\u5c06\u62a5\u6587\u9001\u5165linux\u534f\u8bae\u6808\uff0c\u8fd9\u5176\u4e2d\u9700\u8981\u5c06dpdk\u7684mbuf\u8f6c\u6362\u6210skb_buf\u3002"}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"\u5f53linux\u5411kni\u7aef\u53e3\u53d1\u9001\u62a5\u6587\u65f6\uff0c\u8c03\u7528\u56de\u8c03\u51fd\u6570kni_net_tx()\uff0c\u7136\u540e\u62a5\u6587\u7ecf\u8fc7\u8f6c\u6362\u4e4b\u540e\u53d1\u9001\u5230\u7aef\u53e3\u4e0a\u3002"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"kni\u4f18\u52bf",children:"kni\u4f18\u52bf"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u76f8\u8f83\u73b0\u5b58\u7684Linux TUN/TAP\u63a5\u53e3\u66f4\u5feb\u7684\u901f\u5ea6\uff08\u6d88\u9664\u4e86\u7cfb\u7edf\u8c03\u7528\u4ee5\u53cacopy_to_user()/copy_from_user()\u5185\u5b58\u62f7\u8d1d\u7684\u6d88\u8017\uff09"}),"\n",(0,t.jsx)(e.li,{children:"\u5141\u8bb8\u6807\u51c6Linux\u7f51\u7edc\u5de5\u5177\u7ba1\u7406DPDK\u63a5\u53e3\uff0c\u5982ethtool, ifconfig \u548c tcpdump"}),"\n",(0,t.jsx)(e.li,{children:"\u63d0\u4f9b\u5230\u5185\u6838\u534f\u8bae\u6808\u63a5\u53e3"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"kni\u4ee3\u7801\u5206\u6790",children:"kni\u4ee3\u7801\u5206\u6790"}),"\n",(0,t.jsx)(e.p,{children:"\u548cigb uio\u6a21\u5757\u4e00\u6837\uff0ckni\u6a21\u5757\u5206\u6210\u5185\u6838\u4ee5\u53ca\u7528\u6237\u6001\u4ee3\u7801\uff0c\u5185\u6838\u6a21\u5757\u5728\u7f16\u8bd1\u51fa\u6765\u4e4b\u540e\u4e3arte_kni.ko\uff0c\u9996\u5148\u63d2\u5165\u5185\u6838\uff0cdpdk\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7528\u6237\u6001\u7684\u4f8b\u5b50\u3002\u9996\u5148\u770b\u4e0bkni\u5185\u6838\u6a21\u5757\u4ee3\u7801,\u5728kni_misc.c\u4e2d\uff0cko\u4ee3\u7801\u5165\u53e3\u4e3a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"module_init(kni_init);\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u9996\u5148\u9009\u62e9kni\u7684\u7ebf\u7a0b\u6a21\u5f0f\uff0c\u5206\u4e3a\u5355\u7ebf\u7a0b\u8fd8\u662f\u591a\u7ebf\u7a0b\uff0c\u6240\u8c13\u5355\u7ebf\u7a0b\u662f\u6307\u6240\u6709\u7684kni\u7aef\u53e3\u6536\u53d1\u90fd\u7531\u4e00\u4e2a\u7ebf\u7a0b\u5b88\u62a4\uff0c\u591a\u7ebf\u7a0b\u53ea\u662f\u6bcf\u4e00\u4e2akni\u7aef\u53e3\u5206\u4e3a\u7531\u4e00\u4e2a\u7ebf\u7a0b\u5b88\u62a4\uff0c\u8fd9\u90e8\u5206\u662f\u5728\u63d2\u5165\u6a21\u5757\u65f6\u5e26\u5165\u53c2\u6570\u9009\u62e9\u3002 \u63a5\u7740\u8c03\u7528\u6ce8\u518c\u51fd\u6570misc_register\uff0c\u5c06kni\u6ce8\u518c\u4e3a\u4e00\u4e2a\u6df7\u6742\u8bbe\u5907\u3002\u5176\u4e2dkni_misc\u7ed3\u6784\u4f53\u91cc\u9762\u5b9a\u4e49\u4e86\u8be5\u6df7\u6742\u8bbe\u5907\u7684\u4e00\u4e9b\u64cd\u4f5c\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"static struct miscdevice kni_misc = {\n\t.minor = MISC_DYNAMIC_MINOR,\n\t.name = KNI_DEVICE,\n\t.fops = &kni_fops,\n};\n\nstatic struct file_operations kni_fops = {\n    .owner = THIS_MODULE,\n    .open = kni_open,\n    .release = kni_release,\n    .unlocked_ioctl = (void *)kni_ioctl,\n    .compat_ioctl = (void *)kni_compat_ioctl,\n};\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u91cc\u6d89\u53ca\u7684\u4e3b\u8981\u64cd\u4f5c\u6709kni_open\uff0ckni_release\uff0c\u4ee5\u53cakni_ioctl\uff0c\u5206\u522b\u5bf9\u5e94\u51e0\u4e2a\u51fd\u6570\u3002"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"kni_open"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"kni_open\u65f6\u5982\u679c\u662f\u5355\u7ebf\u7a0b\u6a21\u5f0f\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b\uff0c\u5e76\u6253\u5f00dev/kni\uff0c\u8fd9\u4e2a\u65f6\u5019\u5728host\u7684dev\u4e0b\u80fd\u770b\u5230kni\u6587\u4ef6\u5939"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"kni_ioctl"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"kni_ioctl\u51fd\u6570\u662f\u4e0e\u7528\u6237\u6001\u901a\u4fe1\u7684\u4e00\u4e2a\u63a5\u53e3\uff0c\u4e3b\u8981\u662fkni_ioctl_create\u51fd\u6570\u3002"}),"\n",(0,t.jsx)(e.p,{children:"ret = copy_from_user(&dev_info, (void *)ioctl_param,  sizeof(dev_info));\u8fd9\u6761\u8bed\u53e5\u4f1a\u62f7\u8d1d\u4ece\u7528\u6237\u6001\u4f20\u8fc7\u6765\u7684\u6d88\u606f\uff0cdev_info\u4e3b\u8981\u5b58\u653e\u4e86\u865a\u62dfkni\u7f51\u53e3\u7684\u76f8\u5173\u53c2\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u4f1a\u6839\u636edev_info\u4e2d\u7684\u53c2\u6570\u6ce8\u518c\u4e00\u4e2akni\u7f51\u53e3ret = register_netdev(net_dev);"}),"\n",(0,t.jsx)(e.p,{children:"\u8fd9\u4e2a\u51fd\u6570\u5b8c\u6210\u521b\u5efa\uff0c\u8fd9\u6837\u5c31\u865a\u62df\u51fa\u4e00\u4e2a\u7f51\u53e3\u51fa\u6765\u3002\u5176\u4e2d165\u884c\u662f\u81ea\u5df1\u4fee\u6539\u7684\uff0c\u56e0\u4e3a\u6211\u53d1\u73b0\u6309\u7167\u6587\u6863\u63d0\u4f9b\u7684\u65b9\u6cd5\u6839\u672c\u4e0d\u80fdping\u901a\u62a5\u6587\uff0c\u6211\u5c06\u751f\u6210kni\u7684mac\u5730\u5740\u4fee\u6539\u6210dpdk\u63a5\u7ba1\u7684\u7f51\u53e3mac\u5373\u53ef\u8d2f\u901a\u3002\u539f\u751f\u6001\u4ee3\u7801\u662f\u968f\u65f6\u751f\u6210\u4e00\u4e2amac\u3002"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u6742\u9879\u8bbe\u5907\uff08misc device\uff09"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"\u6742\u9879\u8bbe\u5907\u4e5f\u662f\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u7528\u5f97\u6bd4\u8f83\u591a\u7684\u4e00\u79cd\u8bbe\u5907\u9a71\u52a8\u3002\u5728 Linux \u5185\u6838\u7684include/linux\u76ee\u5f55\u4e0b\u6709Miscdevice.h\u6587\u4ef6\uff0c\u8981\u628a\u81ea\u5df1\u5b9a\u4e49\u7684misc device\u4ece\u8bbe\u5907\u5b9a\u4e49\u5728\u8fd9\u91cc\u3002\u5176\u5b9e\u662f\u56e0\u4e3a\u8fd9\u4e9b\u5b57\u7b26\u8bbe\u5907\u4e0d\u7b26\u5408\u9884\u5148\u786e\u5b9a\u7684\u5b57\u7b26\u8bbe\u5907\u8303\u7574\uff0c\u6240\u6709\u8fd9\u4e9b\u8bbe\u5907\u91c7\u7528\u4e3b\u7f16\u53f710 \uff0c\u4e00\u8d77\u5f52\u4e8emisc device\uff0c\u5176\u5b9emisc_register\u5c31\u662f\u7528\u4e3b\u6807\u53f710\u8c03\u7528register_chrdev()\u7684\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u4e5f\u5c31\u662f\u8bf4\uff0cmisc\u8bbe\u5907\u5176\u5b9e\u4e5f\u5c31\u662f\u7279\u6b8a\u7684\u5b57\u7b26\u8bbe\u5907\uff0c\u53ef\u81ea\u52a8\u751f\u6210\u8bbe\u5907\u8282\u70b9\u3002"}),"\n",(0,t.jsx)(e.h3,{id:"dpdk-mbuf\u4e0esk_buf\u8f6c\u6362",children:"dpdk mbuf\u4e0esk_buf\u8f6c\u6362"}),"\n",(0,t.jsx)(e.p,{children:"\u6536\u5305\u65f6\u9700\u8c03\u7528netif_receive_skb(skb)\u6216netif_rx_ni(skb)\u901a\u77e5\u5185\u6838\u5904\u7406\u5305\uff0c\u53d1\u5305\u65f6\u76f4\u63a5\u7531\u5185\u6838\u8c03\u7528ndo_start_xmit\u53d1\u51fa\u3002"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"mbuf->sk_buf\uff08\u6536\u5305\uff09"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'/*\n * RX: normal working mode\n */\nstatic void\nkni_net_rx_normal(struct kni_dev *kni)\n{\n    unsigned ret;\n    uint32_t len;\n    unsigned i, num, num_rq, num_fq;\n    struct rte_kni_mbuf *kva;\n    struct rte_kni_mbuf *va[MBUF_BURST_SZ];\n    void * data_kva;\n \n    struct sk_buff *skb;\n    struct net_device *dev = kni->net_dev;\n \n    /* \u6bcf\u6b21\u6536\u5305\u7684\u4e2a\u6570\u5fc5\u987b\u4e3arx_q\u548cfree_q\u7684\u6700\u5c0f\u503c\u4e14\u4e0d\u8d85\u8fc7MBUF_BURST_SZ */\n \n    /* Get the number of entries in rx_q */\n    num_rq = kni_fifo_count(kni->rx_q);\n \n    /* Get the number of free entries in free_q */\n    num_fq = kni_fifo_free_count(kni->free_q);\n \n    /* Calculate the number of entries to dequeue in rx_q */\n    num = min(num_rq, num_fq);\n    num = min(num, (unsigned)MBUF_BURST_SZ);\n \n    /* Return if no entry in rx_q and no free entry in free_q */\n    if (num == 0)\n        return;\n \n    /* Burst dequeue from rx_q */\n    ret = kni_fifo_get(kni->rx_q, (void **)va, num);\n    if (ret == 0)\n        return; /* Failing should not happen */\n \n    /* mbuf\u8f6c\u6362\u4e3askb */\n    /* Transfer received packets to netif */\n    for (i = 0; i < num; i++) {\n        /* mbuf kva */\n        kva = (void *)va[i] - kni->mbuf_va + kni->mbuf_kva;\n        len = kva->data_len;\n        /* data kva */\n        data_kva = kva->data - kni->mbuf_va + kni->mbuf_kva;\n \n        skb = dev_alloc_skb(len + 2);\n        if (!skb) {\n            KNI_ERR("Out of mem, dropping pkts\\n");\n            /* Update statistics */\n            kni->stats.rx_dropped++;\n        }\n        else {\n            /* Align IP on 16B boundary */\n            skb_reserve(skb, 2);\n            memcpy(skb_put(skb, len), data_kva, len);\n            skb->dev = dev;\n            skb->protocol = eth_type_trans(skb, dev);\n            skb->ip_summed = CHECKSUM_UNNECESSARY;\n \n            /* \u53d1\u9001skb\u5230\u534f\u8bae\u6808 */\n            /* Call netif interface */\n            netif_receive_skb(skb);\n            /* Call netif interface */\n\t\t    //netif_rx_ni(skb);//dpdk18.11\n \n            /* Update statistics */\n            kni->stats.rx_bytes += len;\n            kni->stats.rx_packets++;\n        }\n    }\n \n    /* \u901a\u77e5\u7528\u6237\u7a7a\u95f4\u91ca\u653embuf */\n    /* Burst enqueue mbufs into free_q */\n    ret = kni_fifo_put(kni->free_q, (void **)va, num);\n    if (ret != num)\n        /* Failing should not happen */\n        KNI_ERR("Fail to enqueue entries into free_q\\n");\n}\n'})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"sk_buf->mbuf\uff08\u53d1\u5305\uff09"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'static int\nkni_net_tx(struct sk_buff *skb, struct net_device *dev)\n{\n    int len = 0;\n    unsigned ret;\n    struct kni_dev *kni = netdev_priv(dev);\n    struct rte_kni_mbuf *pkt_kva = NULL;\n    struct rte_kni_mbuf *pkt_va = NULL;\n \n    dev->trans_start = jiffies; /* save the timestamp */\n \n    /* Check if the length of skb is less than mbuf size */\n    if (skb->len > kni->mbuf_size)\n        goto drop;\n \n    /**\n     * Check if it has at least one free entry in tx_q and\n     * one entry in alloc_q.\n     */\n    if (kni_fifo_free_count(kni->tx_q) == 0 ||\n            kni_fifo_count(kni->alloc_q) == 0) {\n        /**\n         * If no free entry in tx_q or no entry in alloc_q,\n         * drops skb and goes out.\n         */\n        goto drop;\n    }\n \n    /* skb\u8f6cmbuf */\n    /* dequeue a mbuf from alloc_q */\n    ret = kni_fifo_get(kni->alloc_q, (void **)&pkt_va, 1);\n    if (likely(ret == 1)) {\n        void *data_kva;\n \n        pkt_kva = (void *)pkt_va - kni->mbuf_va + kni->mbuf_kva;\n        data_kva = pkt_kva->data - kni->mbuf_va + kni->mbuf_kva;\n \n        len = skb->len;\n        memcpy(data_kva, skb->data, len);\n        if (unlikely(len < ETH_ZLEN)) {\n            memset(data_kva + len, 0, ETH_ZLEN - len);\n            len = ETH_ZLEN;\n        }\n        pkt_kva->pkt_len = len;\n        pkt_kva->data_len = len;\n \n        /* enqueue mbuf into tx_q */\n        ret = kni_fifo_put(kni->tx_q, (void **)&pkt_va, 1);\n        if (unlikely(ret != 1)) {\n            /* Failing should not happen */\n            KNI_ERR("Fail to enqueue mbuf into tx_q\\n");\n            goto drop;\n        }\n    } else {\n        /* Failing should not happen */\n        KNI_ERR("Fail to dequeue mbuf from alloc_q\\n");\n        goto drop;\n    }\n \n    /* Free skb and update statistics */\n    dev_kfree_skb(skb);\n    kni->stats.tx_bytes += len;\n    kni->stats.tx_packets++;\n \n    return NETDEV_TX_OK;\n \ndrop:\n    /* Free skb and update statistics */\n    dev_kfree_skb(skb);\n    kni->stats.tx_dropped++;\n \n    return NETDEV_TX_OK;\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"kni\u8fd0\u884c",children:"kni\u8fd0\u884c"}),"\n",(0,t.jsx)(e.h3,{id:"\u7f16\u8bd1",children:"\u7f16\u8bd1"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"x86"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"make config T=x86_64-native-linuxapp-gcc EXTRA_CFLAGS='-g -Ofast -fPIC -ftls-model=local-dynamic'\nmake T=x86_64-native-linuxapp-gcc  CONFIG_RTE_KNI_KMOD=y CONFIG_RTE_EAL_IGB_UIO=y EXTRA_CFLAGS='-g -Ofast -fPIC -ftls-model=local-dynamic' install -j 8\nmake examples T=x86_64-native-linuxapp-gcc O=x86_64-native-linuxapp-gcc -j16\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"dpaa"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:'export CROSS=/opt/cross/sysroots/x86_64-fslsdk-linux/usr/bin/aarch64-fsl-linux/aarch64-fsl-linux-\nexport RTE_KERNELDIR=/home/duanyingshou/linux\nmake config T=arm64-dpaa2-linuxapp-gcc CROSS=aarch64-fsl-linux- CROSS_COMPILE="aarch64-fsl-linux-"\nCC="/opt/cross/sysroots/x86_64-fslsdk-linux/usr/bin/aarch64-fsl-linux/aarch64-fsl-linux-gcc --sysroot=/opt/cross/sysroots/aarch64-fsl-linux -fPIC -g"  EXTRA_CFLAGS=\'-g -Ofast -fPIC -ftls-model=local-dynamic\'\nmake examples T=arm64-dpaa2-linuxapp-gcc CC="/opt/cross/sysroots/x86_64-fslsdk-linux/usr/bin/aarch64-fsl-linux/aarch64-fsl-linux-gcc --sysroot=/opt/cross/sysroots/aarch64-fsl-linux -fPIC" EXTRA_CFLAGS=\'-g -Ofast -fPIC -ftls-model=local-dynamic -I/opt/cross/sysroots/aarch64-fsl-linux/usr/include\' CONFIG_RTE_KNI_KMOD=y CONFIG_RTE_EAL_IGB_UIO=n install -j 32\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\u6267\u884c",children:"\u6267\u884c"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:'kni [EAL options] -- -p PORTMASK --config="(port,lcore_rx,lcore_tx[,lcore_kthread,...])[,(port,lcore_rx,lcore_tx[,lcore_kthread,...])]" [-P] [-m]\n\n\n-p PORTMASK:\n\u5341\u516d\u8fdb\u5236\u63a5\u53e3\u63a9\u7801\n--config="(port,lcore_rx,lcore_tx[,lcore_kthread,...])[,(port,lcore_rx,lcore_tx[,lcore_kthread,...])]":\n\u6307\u5b9a\u5bf9\u4e8e\u6bcf\u4e2a\u7269\u7406\u7f51\u53e3\uff0c\u63a5\u6536\u548c\u53d1\u9001DPDK\u7ebf\u7a0b\u7ed1\u5b9a\u7684\u6838\u5fc3\uff0c\u4ee5\u53caKNI\u5185\u6838\u7ebf\u7a0b\u7ed1\u5b9a\u7684\u6838\u5fc3\n-P:\n\u53ef\u9009\u6807\u5fd7\uff0c\u8bbe\u7f6e\u7684\u8bdd\u610f\u5473\u7740\u6df7\u6742\u6a21\u5f0f\uff0c\u4ee5\u4fbf\u4e0d\u533a\u5206\u4ee5\u592a\u7f51\u76ee\u7684MAC\u5730\u5740\uff0c\u63a5\u6536\u6240\u6709\u62a5\u6587\u3002\u4e0d\u8bbe\u7f6e\u6b64\u9009\u9879\uff0c\u4ec5\u76ee\u7684MAC\u5730\u5740\u7b49\u4e8e\u63a5\u53e3MAC\u5730\u5740\u7684\u62a5\u6587\u88ab\u63a5\u6536\n-m:\n\u53ef\u9009\u6807\u5fd7\u3002\u4f7f\u80fd\u76d1\u63a7\u6a21\u5f0f\u5e76\u66f4\u65b0\u4ee5\u592a\u7f51\u94fe\u8def\u72b6\u6001\u3002\u6b64\u9009\u9879\u9700\u8981\u542f\u52a8\u4e00\u4e2aDPDK\u7ebf\u7a0b\u5b9a\u671f\u68c0\u67e5\u7269\u7406\u63a5\u53e3\u94fe\u8def\u72b6\u6001\uff0c\u540c\u6b65\u76f8\u5e94\u7684KNI\u865a\u62df\u7f51\u53e3\u72b6\u6001\u3002\u610f\u5473\u7740\u5f53\u4ee5\u592a\u7f51\u94fe\u8defdown\u7684\u65f6\u5019\uff0cKNI\u865a\u62df\u63a5\u53e3\u5c06\u81ea\u52a8\u7981\u7528\uff0c\u53cd\u4e4b\uff0c\u81ea\u52a8\u542f\u7528\u3002\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:'# rmmod rte_kni\n# insmod kmod/rte_kni.ko\n# sudo ./kni -l 0-3 -n 4 -- -P -p 0x3 -m --config="(0,0,1),(1,2,3)"\n# -l 0-3 \u4f7f\u75280-3\u6838\n# -n 4   \u4f7f\u75284\u4e2a\u6838\n# -p 0x3 (11)\u4f7f\u7528\u4e24\u4e2a\u7f51\u53e3\uff0cport 0\u548cport 1\n# --config="(0,0,1),(1,2,3)" \n# (0,0,1) port 0 \u4f7f\u75280\u6838rx\uff0c1\u6838tx\n# (1,2,3) port 1 \u4f7f\u75282\u6838rx\uff0c3\u6838tx\n./kni -l 0-1 -n 2 -- -p 0x1 -P --config="(0,0,1)"\n\nifconfig vEth0 121.168.1.12/24\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\u5b9a\u4f4d\u8ffd\u8e2a",children:"\u5b9a\u4f4d\u8ffd\u8e2a"}),"\n",(0,t.jsx)(e.p,{children:"\u5728kni_net.c\u7684kni_rx_normal\u4e2d\u7684382\u884c\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'pr_info("kni recv a packet\\n");\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u4f7f\u7528dmesg\u89c2\u5bdf\u8f93\u51fa\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'RTE_LOG(INFO, APP, "kni send %lu packets\\n",kni_stats[port_id].tx_packets);\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u6d4b\u8bd5",children:"\u6d4b\u8bd5"}),"\n",(0,t.jsx)(e.p,{children:"\u4e00\u7aef\u4f7f\u7528pktgen\u56de\u653e\u62a5\u6587\u5230kni\u53e3\uff0c\u5206\u522b\u4f7f\u7528\u5927\u5305\u548c\u5c0f\u5305\u3002\u5927\u5305\u4f7f\u7528GTPU\u62a5\u6587\u6216\u8005\u5176\u4ed6TCP/IP\u62a5\u6587\uff0c\u5c0f\u5305\u4f7f\u7528arp\u62a5\u6587\u3002"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u5927\u5305(\u5305\u957f1460)"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"./app/x86_64-native-linuxapp-gcc/pktgen -c 0xe0000 --socket-mem 1024 -n 2 -- -P -m [18:19].0 -s 0:gtpu.pcap -T --crc-strip\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u5c0f\u5305\uff08\uff09"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-shell",children:"./app/x86_64-native-linuxapp-gcc/pktgen -c 0xe0000 --socket-mem 1024 -n 2 -- -P -m [18:19].0 -s 0:arp_request.pcap -T --crc-strip\n"})}),"\n",(0,t.jsx)(e.p,{children:"kni\u7aef\u7684ip\u9700\u8981\u6839\u636e\u6293\u5305\u62a5\u6587\u8fdb\u884c\u4fee\u6539\u3002"}),"\n",(0,t.jsx)("font",{color:"red",children:"10G\u7f51\u53e3\u5927\u5305\u5927\u81f4\u53ef\u4ee5\u8dd1\u52304Gbps\u7ebf\u901f\uff0c\u5c0f\u530510G\u7f51\u53e3\u5927\u81f4\u53ef\u4ee5\u8dd1\u523050Mbps\u7ebf\u901f\u3002"}),"\n",(0,t.jsx)(e.h1,{id:"reference",children:"reference"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://www.cnblogs.com/kb342/p/6033139.html",children:"https://www.cnblogs.com/kb342/p/6033139.html"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://blog.csdn.net/u013216061/article/details/72511653",children:"https://blog.csdn.net/u013216061/article/details/72511653"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://www.freesion.com/article/148821991/",children:"https://www.freesion.com/article/148821991/"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://blog.csdn.net/whenloce/article/details/94591357",children:"https://blog.csdn.net/whenloce/article/details/94591357"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://blog.csdn.net/nanhangfengshuai/article/details/50533230",children:"https://blog.csdn.net/nanhangfengshuai/article/details/50533230"})}),"\n"]})]})}function k(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(o,{...n})}):o(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>c});var s=i(96540);const t={},l=s.createContext(t);function r(n){const e=s.useContext(l);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),s.createElement(l.Provider,{value:e},n.children)}}}]);