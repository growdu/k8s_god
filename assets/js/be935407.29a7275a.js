"use strict";(self.webpackChunkk_8_s_god=self.webpackChunkk_8_s_god||[]).push([[8476],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},c=s.createContext(r);function a(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(c.Provider,{value:n},e.children)}},51789:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"pgsql/replication/PostgreSQL \u540c\u6b65\u6d41\u590d\u5236\u539f\u7406\u548c\u4ee3\u7801\u6d45\u6790-\u963f\u91cc\u4e91\u5f00\u53d1\u8005\u793e\u533a","title":"PostgreSQL \u540c\u6b65\u6d41\u590d\u5236\u539f\u7406\u548c\u4ee3\u7801\u6d45\u6790-\u963f\u91cc\u4e91\u5f00\u53d1\u8005\u793e\u533a","description":"\u6570\u636e\u5e93ACID\u4e2d\u7684\u6301\u4e45\u5316\u5982\u4f55\u5b9e\u73b0","source":"@site/docs/pgsql/replication/PostgreSQL \u540c\u6b65\u6d41\u590d\u5236\u539f\u7406\u548c\u4ee3\u7801\u6d45\u6790-\u963f\u91cc\u4e91\u5f00\u53d1\u8005\u793e\u533a.md","sourceDirName":"pgsql/replication","slug":"/pgsql/replication/PostgreSQL \u540c\u6b65\u6d41\u590d\u5236\u539f\u7406\u548c\u4ee3\u7801\u6d45\u6790-\u963f\u91cc\u4e91\u5f00\u53d1\u8005\u793e\u533a","permalink":"/blog/docs/pgsql/replication/PostgreSQL \u540c\u6b65\u6d41\u590d\u5236\u539f\u7406\u548c\u4ee3\u7801\u6d45\u6790-\u963f\u91cc\u4e91\u5f00\u53d1\u8005\u793e\u533a","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/pgsql/replication/PostgreSQL \u540c\u6b65\u6d41\u590d\u5236\u539f\u7406\u548c\u4ee3\u7801\u6d45\u6790-\u963f\u91cc\u4e91\u5f00\u53d1\u8005\u793e\u533a.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"WalWriter","permalink":"/blog/docs/pgsql/process/WalWriter"},"next":{"title":"PostgreSQL\u590d\u5236\u69fd\u5b9e\u64cd","permalink":"/blog/docs/pgsql/replication/PostgreSQL\u590d\u5236\u69fd\u5b9e\u64cd"}}');var r=t(74848),c=t(28453);const a={},o=void 0,i={},l=[{value:"\u6570\u636e\u5e93ACID\u4e2d\u7684\u6301\u4e45\u5316\u5982\u4f55\u5b9e\u73b0",id:"\u6570\u636e\u5e93acid\u4e2d\u7684\u6301\u4e45\u5316\u5982\u4f55\u5b9e\u73b0",level:3},{value:"\u6570\u636e\u5e93\u540c\u6b65\u590d\u5236\u539f\u7406\u6d45\u6790",id:"\u6570\u636e\u5e93\u540c\u6b65\u590d\u5236\u539f\u7406\u6d45\u6790",level:3},{value:"\u6570\u636e\u5e93\u540c\u6b65\u590d\u5236\u4ee3\u7801\u6d45\u6790",id:"\u6570\u636e\u5e93\u540c\u6b65\u590d\u5236\u4ee3\u7801\u6d45\u6790",level:3},{value:"\u5982\u4f55\u8bbe\u7f6e\u4e8b\u52a1\u53ef\u9760\u6027\u7ea7\u522b",id:"\u5982\u4f55\u8bbe\u7f6e\u4e8b\u52a1\u53ef\u9760\u6027\u7ea7\u522b",level:3},{value:"\u5982\u4f55\u5b9e\u73b0\u540c\u6b65\u590d\u5236\u964d\u7ea7",id:"\u5982\u4f55\u5b9e\u73b0\u540c\u6b65\u590d\u5236\u964d\u7ea7",level:3}];function d(e){const n={br:"br",code:"code",h3:"h3",img:"img",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"\u6570\u636e\u5e93acid\u4e2d\u7684\u6301\u4e45\u5316\u5982\u4f55\u5b9e\u73b0",children:"\u6570\u636e\u5e93ACID\u4e2d\u7684\u6301\u4e45\u5316\u5982\u4f55\u5b9e\u73b0"}),"\n",(0,r.jsxs)(n.p,{children:["\u6570\u636e\u5e93ACID\u91cc\u9762\u7684D\uff0c\u6301\u4e45\u5316\u3002 \u6307\u7684\u662f\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u63d0\u4ea4\u7684\u4e8b\u52a1\uff0c\u6570\u636e\u662f\u53ef\u9760\u7684\uff0c\u5373\u4f7f\u6570\u636e\u5e93crash\u4e86\uff0c\u5728\u786c\u4ef6\u5b8c\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u80fd\u6062\u590d\u56de\u6765\u3002",(0,r.jsx)(n.br,{}),"\n","PostgreSQL\u662f\u600e\u4e48\u505a\u5230\u7684\u5462\uff0c\u770b\u4e00\u5e45\u56fe\uff0c\u753b\u5f97\u6bd4\u8f83\u4e11\uff0c\u51d1\u5408\u770b\u5427\u3002",(0,r.jsx)(n.br,{}),"\n","\u5047\u8bbe\u4e00\u4e2a\u4e8b\u52a1\uff0c\u5bf9\u6570\u636e\u5e93\u505a\u4e86\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5e76\u4e14\u4ea7\u751f\u4e86\u4e00\u4e9b\u810f\u6570\u636e\uff0c\u9996\u5148\u8fd9\u4e9b\u810f\u6570\u636e\u4f1a\u5728\u6570\u636e\u5e93\u7684shared buffer\u4e2d\u3002",(0,r.jsx)(n.br,{}),"\n","\u540c\u65f6\uff0c\u4ea7\u751f\u8fd9\u4e9b\u810f\u6570\u636e\u7684\u540c\u65f6\u4e5f\u4f1a\u4ea7\u751f\u5bf9\u5e94\u7684redo\u4fe1\u606f\uff0c\u4ea7\u751f\u7684REDO\u4f1a\u6709\u5bf9\u5e94\u7684LSN\u53f7\uff08\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3aREDO \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4e2a\u552f\u4e00\u7684OFFSET\uff0c\u6bcf\u4e00\u7b14REDO\u90fd\u6709\uff09\uff0c\u8fd9\u4e2aLSN\u53f7\u4e5f\u4f1a\u8bb0\u5f55\u5230shared buffer\u4e2d\u5bf9\u5e94\u7684\u810f\u9875\u4e2d\u3002",(0,r.jsx)(n.br,{}),"\n","walwriter\u662f\u8d1f\u8d23\u5c06wal buffer flush\u5230\u6301\u4e45\u5316\u8bbe\u5907\u7684\u8fdb\u7a0b\uff0c\u540c\u65f6\u5b83\u4f1a\u66f4\u65b0\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u8bb0\u5f55\u5df2\u7ecfflush\u7684\u6700\u5927\u7684LSN\u53f7\u3002",(0,r.jsx)(n.br,{}),"\n","bgwriter\u662f\u8d1f\u8d23\u5c06shared buffer\u7684\u810f\u9875\u6301\u4e45\u5316\u5230\u6301\u4e45\u5316\u8bbe\u5907\u7684\u8fdb\u7a0b\uff0c\u5b83\u5728flush\u65f6\uff0c\u9664\u4e86\u8981\u9075\u5faaLRU\u7b97\u6cd5\u4e4b\u5916\uff0c\u8fd8\u8981\u901a\u8fc7LSN\u5168\u5c40\u53d8\u91cf\u7684\u6bd4\u5bf9\uff0c\u6765\u4fdd\u8bc1\u810f\u9875\u5bf9\u5e94\u7684REDO\u8bb0\u5f55\u5df2\u7ecfflush\u5230\u6301\u4e45\u5316\u8bbe\u5907\u4e86\uff0c\u5982\u679c\u53d1\u73b0\u8fd8\u5bf9\u5e94\u7684REDO\u6ca1\u6709\u6301\u4e45\u5316\uff0c\u4f1a\u89e6\u53d1WAL writer\u53bbflush wal buffer\u3002 (\u5373\u786e\u4fdd\u65e5\u5fd7\u6bd4\u810f\u6570\u636e\u5148\u843d\u76d8)",(0,r.jsx)(n.br,{}),"\n","\u5f53\u7528\u6237\u63d0\u4ea4\u4e8b\u52a1\u65f6\uff0c\u4e5f\u4f1a\u4ea7\u751f\u4e00\u7b14\u63d0\u4ea4\u4e8b\u52a1\u7684REDO\uff0c\u8fd9\u7b14REDO\u4e5f\u643a\u5e26\u4e86LSN\u53f7\u3002backend process \u540c\u6837\u9700\u8981\u7b49\u5f85\u5bf9\u5e94LSN flush\u5230\u78c1\u76d8\u540e\u624d\u4f1a\u8fd4\u56de\u7ed9\u7528\u6237\u63d0\u4ea4\u6210\u529f\u7684\u4fe1\u53f7\u3002(\u4fdd\u8bc1\u65e5\u5fd7\u5148\u843d\u76d8\uff0c\u7136\u540e\u8fd4\u56de\u7ed9\u7528\u6237)",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.img,{src:"https://oss-cn-hangzhou.aliyuncs.com/yqfiles/4b1c577f87885244c2be1b6be4621e2c0ad70876.png",alt:"_",title:"_"})]}),"\n",(0,r.jsx)(n.h3,{id:"\u6570\u636e\u5e93\u540c\u6b65\u590d\u5236\u539f\u7406\u6d45\u6790",children:"\u6570\u636e\u5e93\u540c\u6b65\u590d\u5236\u539f\u7406\u6d45\u6790"}),"\n",(0,r.jsxs)(n.p,{children:["\u540c\u6b65\u6d41\u590d\u5236\uff0c\u5373\u4fdd\u8bc1standby\u8282\u70b9\u548c\u672c\u5730\u8282\u70b9\u7684\u65e5\u5fd7\u53cc\u53cc\u843d\u76d8\u3002",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.img,{src:"https://oss-cn-hangzhou.aliyuncs.com/yqfiles/171462a9e5157e2d00f815b8aa3f0bda6ef719ac.png",alt:"1",title:"1"}),(0,r.jsx)(n.br,{}),"\n","PostgreSQL\u4f7f\u7528\u53e6\u4e00\u7ec4\u5168\u5c40\u53d8\u91cf\uff0c\u8bb0\u5f55\u540c\u6b65\u6d41\u590d\u5236\u8282\u70b9\u5df2\u7ecf\u63a5\u6536\u5230\u7684XLOG LSN\uff0c\u4ee5\u53ca\u5df2\u7ecf\u6301\u4e45\u5316\u7684XLOG LSN\u3002",(0,r.jsx)(n.br,{}),"\n","\u7528\u6237\u5728\u53d1\u8d77\u63d0\u4ea4\u8bf7\u6c42\u540e\uff0cbackend process\u9664\u4e86\u8981\u5224\u65ad\u672c\u5730wal\u6709\u6ca1\u6709\u6301\u4e45\u5316\uff0c\u540c\u65f6\u8fd8\u9700\u8981\u5224\u65ad\u540c\u6b65\u6d41\u590d\u5236\u8282\u70b9\u7684XLOG\u6709\u6ca1\u6709\u63a5\u6536\u5230\u6216\u6301\u4e45\u5316\uff08\u901a\u8fc7synchronous_commit\u53c2\u6570\u63a7\u5236\uff09\u3002",(0,r.jsx)(n.br,{}),"\n","\u5982\u679c\u540c\u6b65\u6d41\u590d\u5236\u8282\u70b9\u7684XLOG\u8fd8\u6ca1\u6709\u63a5\u6536\u6216\u6301\u4e45\u5316\uff0cbackend process\u4f1a\u8fdb\u5165\u7b49\u5f85\u72b6\u6001\u3002"]}),"\n",(0,r.jsx)(n.h3,{id:"\u6570\u636e\u5e93\u540c\u6b65\u590d\u5236\u4ee3\u7801\u6d45\u6790",children:"\u6570\u636e\u5e93\u540c\u6b65\u590d\u5236\u4ee3\u7801\u6d45\u6790"}),"\n",(0,r.jsxs)(n.p,{children:["\u5bf9\u5e94\u7684\u4ee3\u7801\u548c\u89e3\u91ca\u5982\u4e0b\uff1a",(0,r.jsx)(n.br,{}),"\n","CommitTransaction @ src/backend/access/transam/xact.c",(0,r.jsx)(n.br,{}),"\n","RecordTransactionCommit @ src/backend/access/transam/xact.c"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"        /*\n         * If we didn't create XLOG entries, we're done here; otherwise we\n         * should trigger flushing those entries the same as a commit record\n         * would.  This will primarily happen for HOT pruning and the like; we\n         * want these to be flushed to disk in due time.\n         */\n        if (!wrote_xlog)  // \u6ca1\u6709\u4ea7\u751fredo\u7684\u4e8b\u52a1\uff0c\u76f4\u63a5\u8fd4\u56de\n            goto cleanup;\n\n    if (wrote_xlog && markXidCommitted)  // \u5982\u679c\u4ea7\u751f\u4e86redo, \u7b49\u5f85\u540c\u6b65\u6d41\u590d\u5236\n        SyncRepWaitForLSN(XactLastRecEnd);\n"})}),"\n",(0,r.jsx)(n.p,{children:"SyncRepWaitForLSN @ src/backend/replication/syncrep.c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'/*\n * Wait for synchronous replication, if requested by user.\n *\n * Initially backends start in state SYNC_REP_NOT_WAITING and then\n * change that state to SYNC_REP_WAITING before adding ourselves\n * to the wait queue. During SyncRepWakeQueue() a WALSender changes\n * the state to SYNC_REP_WAIT_COMPLETE once replication is confirmed.\n * This backend then resets its state to SYNC_REP_NOT_WAITING.\n */\nvoid\nSyncRepWaitForLSN(XLogRecPtr XactCommitLSN)\n{\n...\n    /*\n     * Fast exit if user has not requested sync replication, or there are no\n     * sync replication standby names defined. Note that those standbys don\'t\n     * need to be connected.\n     */\n    if (!SyncRepRequested() || !SyncStandbysDefined())  //  \u5982\u679c\u4e0d\u662f\u540c\u6b65\u4e8b\u52a1\u6216\u8005\u6ca1\u6709\u5b9a\u4e49\u540c\u6b65\u6d41\u590d\u5236\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de\n        return;\n...\n    /*\n     * We don\'t wait for sync rep if WalSndCtl->sync_standbys_defined is not\n     * set.  See SyncRepUpdateSyncStandbysDefined.\n     *\n     * Also check that the standby hasn\'t already replied. Unlikely race\n     * condition but we\'ll be fetching that cache line anyway so it\'s likely\n     * to be a low cost check.\n     */\n    if (!WalSndCtl->sync_standbys_defined ||    \n        XactCommitLSN <= WalSndCtl->lsn[mode])  //  \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u540c\u6b65\u6d41\u590d\u5236\u8282\u70b9\uff0c\u6216\u8005\u5224\u65ad\u5230commit lsn\u5c0f\u4e8e\u5df2\u540c\u6b65\u7684LSN\uff0c\u8bf4\u660eXLOG\u5df2\u7ecfflush\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\u3002  \n    {\n        LWLockRelease(SyncRepLock);\n        return;\n    }\n...\n\n// \u8fdb\u5165\u5faa\u73af\u7b49\u5f85\u72b6\u6001\uff0c\u8bf4\u660e\u672c\u5730\u7684xlog\u5df2\u7ecfflush\u4e86\uff0c\u53ea\u662f\u7b49\u5f85\u540c\u6b65\u6d41\u590d\u5236\u8282\u70b9\u7684REDO\u540c\u6b65\u72b6\u6001\u3002\n    /*\n     * Wait for specified LSN to be confirmed.\n     *\n     * Each proc has its own wait latch, so we perform a normal latch\n     * check/wait loop here.\n     */\n    for (;;)  // \u8fdb\u5165\u7b49\u5f85\u72b6\u6001\uff0c\u68c0\u67e5latch\u662f\u5426\u6ee1\u8db3\u91ca\u653e\u7b49\u5f85\u7684\u6761\u4ef6\uff08wal sender\u4f1a\u6839\u636eREDO\u7684\u540c\u6b65\u60c5\u51b5\uff0c\u5b9e\u65f6\u66f4\u65b0\u5bf9\u5e94\u7684latch\uff09\n    {\n        int            syncRepState;\n\n        /* Must reset the latch before testing state. */\n        ResetLatch(&MyProc->procLatch);\n\n        syncRepState = MyProc->syncRepState;\n        if (syncRepState == SYNC_REP_WAITING)\n        {\n            LWLockAcquire(SyncRepLock, LW_SHARED);\n            syncRepState = MyProc->syncRepState;\n            LWLockRelease(SyncRepLock);\n        }\n        if (syncRepState == SYNC_REP_WAIT_COMPLETE)  // \u8bf4\u660eXLOG\u540c\u6b65\u5b8c\u6210\uff0c\u9000\u51fa\u7b49\u5f85\n            break;\n\n//  \u5982\u679c\u672c\u5730\u8fdb\u7a0b\u6302\u4e86\uff0c\u8f93\u51fa\u7684\u6d88\u606f\u5185\u5bb9\u662f\uff0c\u672c\u5730\u4e8b\u52a1\u4fe1\u606f\u5df2\u6301\u4e45\u5316\uff0c\u4f46\u662f\u8fdc\u7a0b\u4e5f\u8bb8\u8fd8\u6ca1\u6709\u6301\u4e45\u5316\n        if (ProcDiePending)\n        {\n            ereport(WARNING,\n                    (errcode(ERRCODE_ADMIN_SHUTDOWN),\n                     errmsg("canceling the wait for synchronous replication and terminating connection due to administrator command"),\n                     errdetail("The transaction has already committed locally, but might not have been replicated to the standby.")));\n            whereToSendOutput = DestNone;\n            SyncRepCancelWait();\n            break;\n        }\n\n//  \u5982\u679c\u7528\u6237\u4e3b\u52a8cancel query\uff0c\u8f93\u51fa\u7684\u6d88\u606f\u5185\u5bb9\u662f\uff0c\u672c\u5730\u4e8b\u52a1\u4fe1\u606f\u5df2\u6301\u4e45\u5316\uff0c\u4f46\u662f\u8fdc\u7a0b\u4e5f\u8bb8\u8fd8\u6ca1\u6709\u6301\u4e45\u5316\n        if (QueryCancelPending)\n        {\n            QueryCancelPending = false;\n            ereport(WARNING,\n                    (errmsg("canceling wait for synchronous replication due to user request"),\n                     errdetail("The transaction has already committed locally, but might not have been replicated to the standby.")));\n            SyncRepCancelWait();\n            break;\n        }\n\n// \u5982\u679cpostgres\u4e3b\u8fdb\u7a0b\u6302\u4e86\uff0c\u8fdb\u5165\u9000\u51fa\u6d41\u7a0b\u3002  \n        if (!PostmasterIsAlive())\n        {\n            ProcDiePending = true;\n            whereToSendOutput = DestNone;\n            SyncRepCancelWait();\n            break;\n        }\n\n//  \u7b49\u5f85wal sender\u6765\u4fee\u6539\u5bf9\u5e94\u7684latch\n        /*\n         * Wait on latch.  Any condition that should wake us up will set the\n         * latch, so no need for timeout.\n         */\n        WaitLatch(&MyProc->procLatch, WL_LATCH_SET | WL_POSTMASTER_DEATH, -1);\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6ce8\u610f\u7528\u6237\u8fdb\u5165\u7b49\u5f85\u72b6\u6001\u540e\uff0c\u53ea\u6709\u4e3b\u52a8cancel , \u6216\u8005kill(terminate) , \u6216\u8005\u4e3b\u8fdb\u7a0bdie\u624d\u80fd\u9000\u51fa\u65e0\u9650\u7684\u7b49\u5f85\u72b6\u6001\u3002\u540e\u9762\u4f1a\u8bb2\u5230\u5982\u4f55\u5c06\u540c\u6b65\u7ea7\u522b\u964d\u7ea7\u4e3a\u5f02\u6b65\u3002"}),"\n",(0,r.jsxs)(n.p,{children:["\u524d\u9762\u63d0\u5230\u4e86\uff0c\u7528\u6237\u7aef\u9700\u8981\u7b49\u5f85LATCH\u7684\u91ca\u653e\u4fe1\u53f7\u3002",(0,r.jsx)(n.br,{}),"\n","\u90a3\u4e48\u8c01\u6765\u7ed9\u5b83\u8fd9\u4e2a\u4fe1\u53f7\u4e86\uff0c\u662fwal sender\u8fdb\u7a0b\uff0c\u6e90\u7801\u548c\u89e3\u91ca\u5982\u4e0b :",(0,r.jsx)(n.br,{}),"\n","src/backend/replication/walsender.c"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"StartReplication\n\nWalSndLoop\n\nProcessRepliesIfAny\n\nProcessStandbyMessage\n\nProcessStandbyReplyMessage\n    if (!am_cascading_walsender)  // \u975e\u7ea7\u8054\u6d41\u590d\u5236\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u5c06\u8c03\u7528SyncRepReleaseWaiters\u4fee\u6539backend process\u7b49\u5f85\u961f\u5217\u4e2d\u5b83\u4eec\u5bf9\u5e94\u7684 latch\u3002    \n        SyncRepReleaseWaiters();\n"})}),"\n",(0,r.jsx)(n.p,{children:"SyncRepReleaseWaiters @ src/backend/replication/syncrep.c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/*\n * Update the LSNs on each queue based upon our latest state. This\n * implements a simple policy of first-valid-standby-releases-waiter.\n *\n * Other policies are possible, which would change what we do here and what\n * perhaps also which information we store as well.\n */\nvoid\nSyncRepReleaseWaiters(void)\n{\n...\n      //  \u91ca\u653e\u6ee1\u8db3\u6761\u4ef6\u7684\u7b49\u5f85\u961f\u5217\n    /*\n     * Set the lsn first so that when we wake backends they will release up to\n     * this location.\n     */\n    if (walsndctl->lsn[SYNC_REP_WAIT_WRITE] < MyWalSnd->write)\n    {\n        walsndctl->lsn[SYNC_REP_WAIT_WRITE] = MyWalSnd->write;\n        numwrite = SyncRepWakeQueue(false, SYNC_REP_WAIT_WRITE);\n    }\n    if (walsndctl->lsn[SYNC_REP_WAIT_FLUSH] < MyWalSnd->flush)\n    {\n        walsndctl->lsn[SYNC_REP_WAIT_FLUSH] = MyWalSnd->flush;\n        numflush = SyncRepWakeQueue(false, SYNC_REP_WAIT_FLUSH);\n    }\n...\n"})}),"\n",(0,r.jsx)(n.p,{children:"SyncRepWakeQueue @ src/backend/replication/syncrep.c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/*\n * Walk the specified queue from head.  Set the state of any backends that\n * need to be woken, remove them from the queue, and then wake them.\n * Pass all = true to wake whole queue; otherwise, just wake up to\n * the walsender's LSN.\n *\n * Must hold SyncRepLock.\n */\nstatic int\nSyncRepWakeQueue(bool all, int mode)\n{\n\n...\n    while (proc)  // \u4fee\u6539\u5bf9\u5e94\u7684backend process \u7684latch\n    {\n        /*\n         * Assume the queue is ordered by LSN\n         */\n        if (!all && walsndctl->lsn[mode] < proc->waitLSN)\n            return numprocs;\n\n        /*\n         * Move to next proc, so we can delete thisproc from the queue.\n         * thisproc is valid, proc may be NULL after this.\n         */\n        thisproc = proc;\n        proc = (PGPROC *) SHMQueueNext(&(WalSndCtl->SyncRepQueue[mode]),\n                                       &(proc->syncRepLinks),\n                                       offsetof(PGPROC, syncRepLinks));\n\n        /*\n         * Set state to complete; see SyncRepWaitForLSN() for discussion of\n         * the various states.\n         */\n        thisproc->syncRepState = SYNC_REP_WAIT_COMPLETE;  // \u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u6539\u6210SYNC_REP_WAIT_COMPLETE  \n....\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\u5982\u4f55\u8bbe\u7f6e\u4e8b\u52a1\u53ef\u9760\u6027\u7ea7\u522b",children:"\u5982\u4f55\u8bbe\u7f6e\u4e8b\u52a1\u53ef\u9760\u6027\u7ea7\u522b"}),"\n",(0,r.jsxs)(n.p,{children:["PostgreSQL \u652f\u6301\u5728\u4f1a\u8bdd\u4e2d\u8bbe\u7f6e\u4e8b\u52a1\u7684\u53ef\u9760\u6027\u7ea7\u522b\u3002",(0,r.jsx)(n.br,{}),"\n","off \u8868\u793acommit \u65f6\u4e0d\u9700\u8981\u7b49\u5f85wal \u6301\u4e45\u5316\u3002",(0,r.jsx)(n.br,{}),"\n","local \u8868\u793acommit \u662f\u53ea\u9700\u8981\u7b49\u5f85\u672c\u5730\u6570\u636e\u5e93\u7684wal \u6301\u4e45\u5316\u3002",(0,r.jsx)(n.br,{}),"\n","remote_write \u8868\u793acommit \u9700\u8981\u7b49\u5f85\u672c\u5730\u6570\u636e\u5e93\u7684wal \u6301\u4e45\u5316\uff0c\u540c\u65f6\u9700\u8981\u7b49\u5f85sync standby\u8282\u70b9wal write buffer\u5b8c\u6210(\u4e0d\u9700\u8981\u6301\u4e45\u5316)\u3002",(0,r.jsx)(n.br,{}),"\n","on \u8868\u793acommit \u9700\u8981\u7b49\u5f85\u672c\u5730\u6570\u636e\u5e93\u7684wal \u6301\u4e45\u5316\uff0c\u540c\u65f6\u9700\u8981\u7b49\u5f85sync standby\u8282\u70b9wal\u6301\u4e45\u5316\u3002",(0,r.jsx)(n.br,{}),"\n","\u63d0\u9192\u4e00\u70b9\uff0c synchronous_commit \u7684\u4efb\u4f55\u4e00\u79cd\u8bbe\u7f6e\uff0c\u90fd\u4e0d\u5f71\u54cdwal\u65e5\u5fd7\u6301\u4e45\u5316\u5fc5\u987b\u5148\u4e8eshared buffer\u810f\u6570\u636e\u6301\u4e45\u5316\u3002 \u6240\u4ee5\u4e0d\u7ba1\u4f60\u600e\u4e48\u8bbe\u7f6e\uff0c\u90fd\u4e0d\u597d\u5f71\u54cd\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"synchronous_commit = off                # synchronization level;\n                                        # off, local, remote_write, or on\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\u5982\u4f55\u5b9e\u73b0\u540c\u6b65\u590d\u5236\u964d\u7ea7",children:"\u5982\u4f55\u5b9e\u73b0\u540c\u6b65\u590d\u5236\u964d\u7ea7"}),"\n",(0,r.jsxs)(n.p,{children:["\u4ece\u524d\u9762\u7684\u4ee3\u7801\u89e3\u6790\u53ef\u4ee5\u5f97\u77e5\uff0c\u5982\u679c backend process \u8fdb\u5165\u4e86\u7b49\u5f85\u5faa\u73af\uff0c\u53ea\u63a5\u53d7\u51e0\u79cd\u4fe1\u53f7\u964d\u7ea7\u3002 \u5e76\u4e14\u964d\u7ea7\u540e\u4f1a\u544a\u8b66\uff0c\u8868\u793a\u672c\u5730wal\u5df2\u6301\u4e45\u5316\uff0c\u4f46\u662fsync standby\u8282\u70b9\u4e0d\u786e\u5b9awal\u6709\u6ca1\u6709\u6301\u4e45\u5316\u3002",(0,r.jsx)(n.br,{}),"\n","\u5982\u679c\u4f60\u53ea\u914d\u7f6e\u4e861\u4e2astandby\uff0c\u5e76\u4e14\u5c06\u5b83\u914d\u7f6e\u4e3a\u540c\u6b65\u6d41\u590d\u5236\u8282\u70b9\u3002\u4e00\u65e6\u51fa\u73b0\u7f51\u7edc\u6296\u52a8\uff0c\u6216\u8005sync standby\u8282\u70b9\u6545\u969c\uff0c\u5c06\u5bfc\u81f4\u540c\u6b65\u4e8b\u52a1\u8fdb\u5165\u7b49\u5f85\u72b6\u6001\u3002",(0,r.jsx)(n.br,{}),"\n","\u600e\u4e48\u964d\u7ea7\u5462\uff1f",(0,r.jsx)(n.br,{}),"\n","\u65b9\u6cd51.",(0,r.jsx)(n.br,{}),"\n","\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5e76\u91cd\u7f6e"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"$ vi postgresql.conf  \nsynchronous_commit = local\n$ pg_ctl reload\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540ecancel \u6240\u6709query ."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"postgres=# select pg_cancel_backend(pid) from pg_stat_activity where pid<>pg_backend_pid();\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u6536\u5230\u8fd9\u6837\u7684\u4fe1\u53f7\uff0c\u8868\u793a\u4e8b\u52a1\u6210\u529f\u63d0\u4ea4\uff0c\u540c\u65f6\u8868\u793aWAL\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u540c\u6b65\u5230sync standby\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"WARNING:  canceling wait for synchronous replication due to user request\nDETAIL:  The transaction has already committed locally, but might not have been replicated to the standby.\nCOMMIT\npostgres=# show synchronous_commit ;\n synchronous_commit \n--------------------\n off\n(1 row)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u540c\u65f6\u5b83\u4f1a\u8bfb\u5230\u5168\u5c40\u53d8\u91cfsynchronous_commit \u5df2\u7ecf\u662f local\u4e86\u3002",(0,r.jsx)(n.br,{}),"\n","\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u964d\u7ea7\u7684\u52a8\u4f5c\u3002"]}),"\n",(0,r.jsxs)(n.p,{children:["\u65b9\u6cd52.",(0,r.jsx)(n.br,{}),"\n","\u65b9\u6cd51\u7684\u964d\u7ea7\u9700\u8981\u5bf9\u5df2\u6709\u7684\u6b63\u5728\u7b49\u5f85wal sync\u7684pid\u4f7f\u7528cancel\u8fdb\u884c\u5904\u7406\uff0c\u6709\u70b9\u4e0d\u4eba\u6027\u5316\u3002",(0,r.jsx)(n.br,{}),"\n","\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u4ee3\u7801\u7684\u65b9\u5f0f\uff0c\u505a\u5230\u66f4\u4eba\u6027\u5316\u3002",(0,r.jsx)(n.br,{}),"\n","SyncRepWaitForLSN for\u5faa\u73af\u4e2d\uff0c\u52a0\u4e00\u4e2a\u5224\u65ad\uff0c\u5982\u679c\u53d1\u73b0\u5168\u5c40\u53d8\u91cfsync commit\u53d8\u6210local, off\u4e86\uff0c\u5219\u544a\u8b66\u5e76\u9000\u51fa\u3002\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4eba\u4e3a\u7684\u53bbcancel query\u4e86."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"WARNING:  canceling wait for synchronous replication due to user request\nDETAIL:  The transaction has already committed locally, but might not have been replicated to the standby.\n"})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);